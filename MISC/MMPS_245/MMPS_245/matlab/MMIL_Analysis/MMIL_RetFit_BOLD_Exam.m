function MMIL_RetFit_BOLD_Exam(ContainerPath,FSContainerPath,varargin)
%function MMIL_RetFit_BOLD_Exam(ContainerPath,FSContainerPath,[options])
%
% Required Input:
%  ContainerPath: full path of directory containing fMRI retinotopy data
%  FSContainerPath: full path of directory containing freesurfer recon
%
% Optional Parameters for Input Data:
%  'multisess_flag': [0|1] indicates source of input analyses
%    0: use results from one or more scans within session
%    1: use results from multiple sessions
%    if 1, RF_pol_dir, RF_ecc_dir, etc. will be ignored
%    {default = 0}
%  'RF_pol_dir': polar angle BOLD analysis subdirectory of RETContainerPath
%    if empty, will attempt to find suitable value
%    {default = []}
%  'RF_ecc_dir': eccentricity BOLD analysis subdirectory of RETContainerPath
%    if empty, will attempt to find suitable value
%    {default = []}
%  'RF_pol_stem': polar angle file stem
%    if empty, will attempt to find suitable value
%    {default = []}
%  'RF_ecc_stem' eccentricity file stem
%    if empty, will attempt to find suitable value
%    {default = []}
%  'RF_pol_snums': polar angle BOLD scan numbers
%    if empty, will be set to odd scans (for or rev depending on SessInfo.revflag)
%    {default = []}
%  'RF_ecc_snums': eccentricity BOLD scan numbers
%    if empty, will be set to even scans (for or rev depending on SessInfo.revflag)
%    {default = []}
%  'RF_BOLD_infix': string inside BOLD file names (e.g. 'corr_resBOLD')
%    {default = 'corr_resBOLD'}
%
% Optional Parameters for Retinotopy Fitting:
%  'RF_outdir': output directory
%    full path or relative to ContainerPath
%    {default = 'retfit'}
%  'RF_outstem': output file stem
%    {default = 'retfit'}
%  'RF_roi_name': file stem of ROI file (e.g. lh.roi_name.label)
%    {default = 'v123'}
%  'RF_r_max': maximum eccentricity (for stimulus presentation)
%    {default = 15}
%  'RF_r_min': minimum eccentricity (for stimulus presentation)
%    If empty, will use RF_r_min_factor*RF_r_max
%    {default = []}
%  'RF_r_min_factor': multiplier of RF_r_max to obtain RF_r_min, if empty
%    {default = 0.02}
%  'RF_logtrans_flag': [0|1] whether log transform was used for ecc stimulus
%    {default = 0}
%  'RF_map_v123_flag': [0|1] whether to model V1-V2-V3 complex or
%     a single area mapping entire hemifield
%     {default = 1}
%  'RF_map_poly_flag': [0|1] use polynomial function to deform template
%    {default = 1}
%  'RF_map_poly_order': order of polynomial function (n+1 additional parameters)
%     used to deform template
%    {default = 4}
%  'RF_map_model_type': [0|1|2] model used for initial estimates of u and v
%    0: rectangle
%    1: wedge
%    2: radial wedge
%    {default = 2}
%  'RF_map_area_name': area label if map_v123_flag=0
%     {default = 'v'}
%  'RF_map_rev_polar_flag': [0|1] whether to reverse direction of polar angle
%     {default = 0}
%  'forceflag': [0|1] overwrite existing output
%    {default = 0}
%
% Created:  02/24/11 by Don Hagler
% Last Mod: 12/05/13 by Don Hagler
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if ~mmil_check_nargs(nargin,3), return; end;
parms = mmil_args2parms(varargin, { ...
  'multisess_flag',false,[false true],...
  'RF_pol_dir',[],[],...
  'RF_ecc_dir',[],[],...
  'RF_pol_stem',[],[],...
  'RF_ecc_stem',[],[],...
  'RF_pol_snums',[],[],...
  'RF_ecc_snums',[],[],...
  'RF_BOLD_infix','corr_resBOLD',[],...
  'RF_Fourier_infix','fstats_pval',[],...
  'RF_outdir','retfit',[],...
  'RF_outstem','retfit',[],...
  'RF_roi_name','v123',[],...
  'RF_r_max',15,[1,100],...
  'RF_r_min',[],[0,100],...
  'RF_r_min_factor',0.02,[0,1],...
  'RF_logtrans_flag',false,[false true],...
  'RF_fnamestem','BOLD',[],...
  'forceflag',false,[false true],...
... % retinotopy data / tksurfer
  'RF_hemilist',{'lh','rh'},{'lh','rh'},...
  'RF_suffixlist',{'_r','_i'},{'_r','_i'},...
  'RF_outstemlist',{'pol','ecc'},[],...
  'RF_surf','sphere',{'white','pial','inflated','sphere'},...
  'RF_smooth',10,[0,100],...
  'RF_fthresh',0,[],...
  'RF_fmid',1.5,[],...
  'RF_fslope',3,[],...
  'RF_revflag',false,[false true],...
  'RF_sph_rot',{[45 0 90],[45 -20 -90]},[],...
... % retfit parameters
  'RF_roi_dilate_niters',0,[0,1000],...
  'RF_roi_rotation',65,[-180,180],...
  'RF_roi_shift_u',0,[],...
  'RF_roi_shift_v',0,[],...
  'RF_roi_scale_u',0.7,[],...
  'RF_roi_scale_v',0.7,[],...
  'RF_prereg_nruns_quick',2,[],...
  'RF_prereg_niter_quick',100,[],...
  'RF_prereg_step_size_quick',[0.1,0.05,0.01],[],...
  'RF_prereg_nruns',200,[],...
  'RF_prereg_niter',100,[],...
  'RF_map_poly_coef_range',[-5,5],[-100,100],...
  'RF_map_radial_wedge_fact_range',[0.05 0.4],[],...
  'RF_map_radial_offset_range',[1 4],[],...
  'RF_map_scale_u_range',[0.6 0.8],[],...
  'RF_map_scale_v_range',[0.3 0.6],[],...
  'RF_map_rotation_range',[-10 10],[],...
  'RF_map_shift_u_range',[-0.1,0.1],[],...
  'RF_map_shift_v_range',[-0.1,0.1],[],...
  'RF_map_wedge_fact_range',[0.7 1.3],[],...
  'RF_map_r_min_range',[1 1],[],...
  'RF_map_r_max_range',[12 12],[],...
  'RF_map_v1_width_range',[1 1],[],...
  'RF_map_v2_width_range',[0.6 1],[],...
  'RF_map_v3_width_range',[0.5 1],[],...
  'RF_map_v1_length_range',[0.8 1.2],[],...
  'RF_map_v2_length_range',[0.8 1.2],[],...
  'RF_map_v3_length_range',[0.8 1.2],[],...
  'RF_nruns',1,[],...
  'RF_niter',2000,[],...
  'RF_ecc_fact',1,[0,1],...
  'RF_smooth_fact',1,[0,Inf],...
  'RF_fold_fact',15,[0,Inf],...
  'RF_vacancy_fact',0,[0,Inf],...
  'RF_max_outbound_penalty',20,[0 10000],...
  'RF_data_smooth_sigma',0.1,[0,1],...
  'RF_cost_include_percentile',100,[50,100],...
  'RF_map_v123_flag',true,[false true],...
  'RF_map_poly_flag',true,[false true],...
  'RF_map_poly_order',4,[1,10],...
  'RF_map_model_type',2,[0,1,2],...
  'RF_map_logtrans_flag',true,[false true],...
  'RF_map_area_name','v',[],...
  'RF_map_rev_polar_flag',false,[false true],...
});

if mmil_isrelative(parms.RF_outdir)
  parms.RF_outdir = [ContainerPath '/' parms.RF_outdir];
end;

if isempty(parms.RF_r_min)
  parms.RF_r_min = parms.RF_r_min_factor * parms.RF_r_max;
end;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% prepare for retfit
args = MMIL_Args(parms,'BOLD_MMIL_Ready_RetFit');
errcode = BOLD_MMIL_Ready_RetFit(ContainerPath,FSContainerPath,args{:});
if errcode, return; end;

% check for ROI file
for h=1:length(parms.RF_hemilist)
  fname_label = sprintf('%s/%s.%s.label',parms.RF_outdir,parms.RF_hemilist{h},...
    parms.RF_roi_name);
  if ~exist(fname_label,'file')
    fprintf('%s: RetFit is ready for manually defined region of interest named:\n%s\n',...
      mfilename,fname_label);
    return;
  end;
end;

% run retfit
olddir = pwd;
cd(parms.RF_outdir);
for h=1:length(parms.RF_hemilist)
  run_retfit(parms.RF_hemilist{h})
end;
cd(olddir);

