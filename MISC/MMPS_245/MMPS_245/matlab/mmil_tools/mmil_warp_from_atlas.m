function [fname_subj,fname_vxl]=mmil_warp_from_atlas(fname_atl,fname_reg,varargin)
%function [fname_subj,fname_vxl]=mmil_warp_from_atlas(fname_atl,fname_reg,[options])
%
% Usage:
%  [fname_subj,fname_vxl]=mmil_warp_from_atlas(fname_atl,fname_reg,'key1', value1,...);
%
%  Required Input:
%    fname_atl: full path name of input volume file in atlas space
%    fname_reg: full path name of matlab file containing registration info
%               (generated by mmil_warp_to_atlas)
%
%  Optional Input:
%   'fname_subj' - output file name
%     {default: []}
%   'fname_vxl' - full path name of pre-created matlab file containing voxel mapping
%                 (e.g. output of this function)
%     {default: []}
%   'outdir' - output directory
%     {default = directory of fname_atl (must have permission!)}
%   'interpm' - interpolation method
%      0 = nearest neighbor, 1 = linear, 2 = cubic
%      3 = key's spline, 4 = cubic spline, 5 = hamming sinc
%     { default: 1 }
%   'bclamp' - [0|1] whether to set negative values to zero
%     { default: 1 }
%   'forceflag' - [0|1] whether to run calculations even if output files exist
%     { default: 0 }
%
%  Output:
%   fname_subj: full path of output subject-space volume file
%   fname_vxl: full path of matlab file containing voxel mapping from
%                 atlas to subject space
%
% Created:  04/10/08 by Don Hagler
% Last Mod: 09/27/12 by Don Hagler
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% parse input parameters

fname_subj = [];
fname_vxl = [];

if (~mmil_check_nargs(nargin,2)) return; end;
parms = mmil_args2parms(varargin, { ...
  'outdir',[],[],...
  'fname_subj',[],[],...
  'fname_vxl',[],[],...
  'interpm',1,[0,5],...
  'bclamp',true,sort([false true]),...
  'padding',1,[1,5],...
  'forceflag',false,sort([false true]),...
});

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if ~exist(fname_reg,'file'), error('file %s not found',fname_reg); end;
[fpath,fstem,fext] = fileparts(fname_reg);
if isempty(parms.outdir), parms.outdir = fpath; end;
n = regexp(fstem,'(?<stem>\w+)_dctReg2Atlas$','names');
if isempty(n) || ~strcmp(fext,'.mat')
  error('file %s is missing required ending: ''_dctReg2Atlas.mat''',...
    fname_reg);
end;
reg_stem = n.stem;

if ~exist(fname_atl,'file'), error('file %s not found',fname_atl); end;
[fpath,fstem,fext] = fileparts(fname_atl);
if isempty(parms.outdir), parms.outdir = fpath; end;
if ~exist(parms.outdir,'dir')
  [success,msg] = mkdir(parms.outdir);
  if ~success
    error('failed to create outdir %s:\n%s',parms.outdir,msg);
   end;
end;

if ~isempty(parms.fname_vxl) && ~exist(parms.fname_vxl,'file')
  error('file %s not found',parms.fname_vxl);
end;

% get info about fname_atl
[tmp,M_atl,mrparms_atl,volsz_atl] = fs_load_mgh(fname_atl,[],[],1);
nframes = volsz_atl(4);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% generate voxel map for morphing from atlas to subj
if ~isempty(parms.fname_reg)
  fname_vxl = parms.fname_vxl;
else
  fname_vxl = sprintf('%s/%s_dctReg2Atlas_vxlmap.mat',parms.outdir,reg_stem);
  clear vxlmap vol_atl;
  if ~exist(fname_vxl,'file') || parms.forceflag
    load(fname_reg);
    fprintf('%s: loading volume %s...\n',mfilename,fname_atl);
    [vol_atl,M,mr_parms,volsz_atl] = fs_load_mgh(fname_atl,[],1);
    vol_atl = ctx_mgh2ctx(vol_atl,M);
    vol_atl.maxI = max(vol_atl.imgs(:));
    vol_atl.minI = min(vol_atl.imgs(:));
    regStruct.range = [1 size(vol_atl.imgs,1);...
                       1 size(vol_atl.imgs,2);...
                       1 size(vol_atl.imgs,3)];
    fprintf('%s: generating voxel map for morphing from atlas to subject...\n',...
      mfilename);
    vxlmap = getDCTVxlMapping_amd(vol_atl, regStruct);
    save(fname_vxl,'vxlmap');
  end;
end;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% warp fname_atl to subject
if ~isempty(parms.fname_subj)
  fname_subj = parms.fname_subj;
else
  fname_subj = sprintf('%s/%s_subj%s',parms.outdir,fstem,fext);
end;
if ~exist(fname_subj,'file') || parms.forceflag
  if ~exist('regStruct','var')
    load(fname_reg);
  end;
  fprintf('%s: warping volume %s to subj...\n',mfilename,fname_atl);
  vol_subj = zeros([volsz_Subj,nframes]);
  for f=1:nframes
    [vol_atl,M] = fs_load_mgh(fname_atl,[],f);
    vol_atl = ctx_mgh2ctx(vol_atl,M);
    vol_atl.maxI = max(vol_atl.imgs(:));
    vol_atl.minI = min(vol_atl.imgs(:));

    % resample from atlas to subject
    if ~exist('vxlmap','var') | isempty(vxlmap), load(fname_vxl); end;
    vol_subj_tmp = getVolFromVxlMap_amd(vol_atl,vxlmap,1,...
      parms.interpm,parms.padding,parms.bclamp);

    % resample to original orientation
    vol_tmp = ctx_mgh2ctx(zeros(volsz_Subj),M_Subj);
    vol_subj_tmp = vol_resample_pad(vol_subj_tmp,vol_tmp,...
      eye(4),parms.interpm,parms.bclamp);
    vol_subj(:,:,:,f) = vol_subj_tmp.imgs;
  end;
  fs_save_mgh(vol_subj,fname_subj,M_Subj,mr_parms);
end;

