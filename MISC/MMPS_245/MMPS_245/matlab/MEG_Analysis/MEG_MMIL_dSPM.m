function errcode = MEG_MMIL_dSPM(ContainerPath,FSContainerPath,varargin)
%function errcode = MEG_MMIL_dSPM(ContainerPath,FSContainerPath,[options])
%
% Purpose: run Dynamic Statistical Parametric Mapping
%
% Required Input:
%   ContainerPath: full path containing processed MEG data
%   FSContainerPath: full path of FreeSurfer recon
%
% Optional Parameters:
%  'proc_prefix': prefix of input processed MEG files
%     {default = 'proc'}
%  'proc_infix': infix of input processed MEG files
%     e.g. [], 'combcond', 'subnull'
%     {default = []}
%  'prefix': prefix of all output files
%     {default ='dSPM'}
%  'ico_FSContainerPath': full path of directory containing freesurfer
%      recon resampled to ico (e.g. ico4)
%    {default = []}
%  'transfile': text file containing 4x4 mri2head transformation
%     full path or relative to ContainerPath
%     {default = 'mri2head.trans'}
%  'badchanfile': name of text file containing bad channel labels
%     full path or relative to ContainerPath
%     {default = 'badchans.txt'}
%  'conditions': vector of condition numbers to analyze
%     {default = []} (if empty, use all conditions found in avg_data.averages)
%  'usegrad_flag': [1|0] whether to use gradiometer data, if available
%     {default = 1}
%  'usemag_flag': [1|0] whether to use magnitometer data, if available
%     {default = 1}
%  'useEEG_flag': [1|0] whether to use EEG data, if available
%     {default = 1}
%  'ncov_type': type of noise covariance matrix
%     0 = identity matrix, 1 = average prestimulus, 2 = single trials
%     {default = 2}
%  'SNR': estimated signal-to-noise-ratio (for regularization parameter)
%     {default = 10}
%  'forward_only_flag': [0|1] calculate forward solution and quit
%     {default = 0}
%  'forceflag': [0|1|2] whether to overwrite files
%     0: do nothing if output exists
%     1: overwrite results and other output
%     2: overwrite all output, including forward solution
%     {default = 0}
%
% For a complete list of options with detailed descriptions, see ts_dSPM
%
% Created:  02/21/11 by Don Hagler
% Last Mod: 06/16/14 by Don Hagler
%

%% todo: badchannames
%% todo: rootoutdir in ContainerPath/dSPM ?

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

errcode = 0;
if ~mmil_check_nargs(nargin,2), return; end;
parms = mmil_args2parms(varargin, { ...
  'proc_prefix','proc',[],...
  'proc_infix',[],[],...
  'prefix','dSPM',[],...
  'transfile','mri2head.trans',[],...
  'badchanfile','badchans.txt',[],...
  'forward_only_flag',false,[false true],...
  'forceflag',0,[0:2],...
...
  'conditions',[],[],...
  'calc_dipinfo_flag',true,[false true],...
  'lh_dip_info',[],[],...
  'rh_dip_info',[],[],...
  'lh_dip_file','bem/lh_white.dip',[],...
  'rh_dip_file','bem/rh_white.dip',[],...
  'nodec_flag',false,[false true],...
  'lh_dec_dips',[],[],...
  'rh_dec_dips',[],[],...
  'lh_dec_file','bem/lh_white_7.dec',[],...
  'rh_dec_file','bem/rh_white_7.dec',[],...
  'ncov_type',2,[0 2],...
  'ncov_conditions',[],[],...
  'calc_scalefacts_flag',false,[false true],...
  'baseline_start',-Inf,[-Inf Inf],...
  'baseline_end',0,[-Inf Inf],...
  'baseline_flag',true,[false true],...
  'ssp_projmat',[],[],...
  'SNR',10,[eps Inf],...
  'noisenorm_flag',true,[false true],...
  'noisenorm_identity_flag',true,[false true],...
  'depthweight_flag',false,[false true],...
  'depthweight_p',0.5,[0,1],...
  'bem_flag',true,[false true],...
  'openmeeg_flag',false,[false true],...
  'radii',[],[],...
  'conductivities',[0.3 0.012 0.3],[],...
  'EEG_gain_scalefact',1,[-Inf Inf],...
  'nlayers',3,[1:4],...
  'badchans',[],[],...
  'usegrad_flag',true,[false true],...
  'usemag_flag',true,[false true],...
  'useEEG_flag',true,[false true],...
  'grad_scalefact',10^13,[-Inf Inf],...
  'mag_scalefact',10^15,[-Inf Inf],...
  'EEG_scalefact',10^6,[-Inf Inf],...
  'write_stc_flag',true,[false true],...
  'stc_scalefact',1,[eps Inf],...
  'write_mgh_flag',true,[false true],...
  'sparsesmooth',0,[0 1000],...
  'postsmooth',0,[0 1000],...
  'mbmask_flag',false,[false,true],...
  'resamp2ico_flag',false,[false true],...
  'icolevel',7,[1 7],...
  'icosmooth',3,[0 1000],...
  'write_fif_flag',false,[false true],...
  'template_fif',[],[],...
  'bem_surf_files',...
    {'bem/inner_skull.tri','bem/outer_skull.tri','bem/outer_scalp.tri'},[],...
  'cen_sph',[],[],...
  'trans',[],[],...
  'alignment_fif',[],[],...
  'lh_sourcecov_file',[],[],...
  'rh_sourcecov_file',[],[],...
  'sourcecov_thresh',0,[-Inf Inf],...
  'sourcecov_thresh_abs_flag',true,[false true],...
  'sourcecov_maxvar',0.9,[0 1],...
  'sourcecov_minvar',0.09,[0 1],...
  'forward_matfile',[],[],...
  'inverse_matfile',[],[],...
  'refEEG_coords',[],[],...
  'prewhiten_flag',false,[false true],...
  'orient_constr_flag',false,[false true],...
  'orient_tang',0,[0 1],...
  'smooth_constr_flag',false,[false true],...
  'smooth_constr_nsmooth',10,[1,100],...
  'signed_sources_flag',true,[false true],...
  'datatype','single',{'single','double'},...
  'save_results_flag',true,[false true],...
  'save_avg_flag',false,[false true],...
  'save_fiterr_flag',false,[false true],...
...
  'ico_FSContainerPath',[],[],...
});

% excl_tags are fields that should not be passed to ts_dSPM
excl_tags = {'proc_prefix','proc_infix','ico_FSContainerPath'};

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% check mri2head registration file
if mmil_isrelative(parms.transfile)
  parms.transfile = [ContainerPath '/' parms.transfile];
end;
if ~exist(parms.transfile,'file')
  fprintf('%s: ERROR: transfile %s not found; run MEG_MMIL_Reg2MRI\n',...
    mfilename,parms.transfile);
  errcode = 1;
  return;
end;

if ~isempty(parms.badchanfile)
  if mmil_isrelative(parms.badchanfile)
    parms.badchanfile = [ContainerPath '/' parms.badchanfile];
  end;
  if ~exist(parms.badchanfile,'file'), parms.badchanfile = []; end;
end;

if ~isempty(parms.ico_FSContainerPath)
  FSContainerPath = parms.ico_FSContainerPath;
end;

% check FSContainerPath
if ~exist(FSContainerPath,'dir')
  fprintf('%s: ERROR: FSContainerPath %s not found\n',mfilename,FSContainerPath);
  errcode = 1;
  return;
end;
[FSRootDir,FSContainerDir,text] = fileparts(FSContainerPath);
if ~isempty(text), FSContainerDir = [FSContainerDir,text]; end;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% load ContainerInfo
[ContainerInfo,errcode] = MMIL_Load_ContainerInfo(ContainerPath);
if errcode, return; end;

% load avg_data
if ~isempty(parms.proc_infix)
  infix = ['_' parms.proc_infix];
else
  nfiles = length(ContainerInfo.input_data_files);
  if nfiles>1
    infix = [];
  else
    infix = '_1';
  end;
end;
fname_proc = sprintf('%s/matfiles/%s_avg_data%s.mat',...
  ContainerPath,parms.proc_prefix,infix);
if ~exist(fname_proc,'file')
  fprintf('%s: ERROR: processed MEG file %s not found\n',mfilename,fname_proc);
  errcode = 1;
  return;
end;
fprintf('%s: loading data from %s...\n',mfilename,fname_proc);
load(fname_proc);
avg_data.source_fname = fname_proc;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% add/change parms
if ~isempty(parms.ico_FSContainerPath)
  parms.nodec_flag = 1;
end;
if isempty(find(strcmp('eeg',{avg_data.sensor_info.typestring})))
  parms.useEEG_flag = 0;
end;
if ~parms.useEEG_flag
  parms.nlayers = 1;
end;
parms.subjdir = FSRootDir;
parms.rootoutdir = ContainerPath;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% convert parms to cell array of parameter names and argument values
tags = setdiff(fieldnames(parms),excl_tags);
args = mmil_parms2args(parms,tags);

fprintf('%s: running Dynamic Statistical Parametric Mapping...\n',mfilename);
ts_dSPM(avg_data,FSContainerDir,args{:});
fprintf('%s: finished\n',mfilename);

