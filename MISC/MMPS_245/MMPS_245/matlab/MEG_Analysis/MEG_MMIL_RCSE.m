function errcode = MEG_MMIL_RCSE(ContainerPath,FSContainerPath,varargin)
%function errcode = MEG_MMIL_RCSE(ContainerPath,FSContainerPath,[options])
%
% Purpose: run Retinotopy Constrained Source Estimation
%
% Required Input:
%   ContainerPath: full path containing processed MEG data
%   FSContainerPath: full path of FreeSurfer recon
%
% Optional Parameters:
%  'proc_prefix': prefix of input processed MEG files
%     {default = 'proc'}
%  'proc_infix': infix of input processed MEG files
%     e.g. [], 'combcond', 'subnull'
%     {default = []}
%  'prefix': prefix of all output files
%     {default ='RCSE'}
%  'infix': additional string attached to output prefix
%     e.g. to indicate values of key parameters
%     {default = []}
%  'infix_flag': [0|1] attach automatically generated string
%     indicating values of certain parameters
%     ignored if 'infix' is not empty
%     {default = 0}
%  'transfile': text file containing 4x4 mri2head transformation
%     full path or relative to ContainerPath
%     {default = 'mri2head.trans'}
%  'badchanfile': name of text file containing bad channel labels
%     full path or relative to ContainerPath
%     {default = 'badchans.txt'}
%  'usegrad_flag': [1|0] whether to use gradiometer data, if available
%     {default = 1}
%  'usemag_flag': [1|0] whether to use magnitometer data, if available
%     {default = 1}
%  'useEEG_flag': [1|0] whether to use EEG data, if available
%     {default = 1}
%  'retfit_dir' - directory containing retfit results
%    absolute path or relative to ContainerPath
%    {default = 'retfit'}
%  'retfit_stem' - file stem for refit results
%    {default = 'retfit'}
%  'forward_matfile' - mat file containing gain matrix
%     If does not exist, will calculate
%     {default: []}
%  'use_areas' - vector of visual area indices to include in forward model
%    If empty, use all areas specified in retfit results
%    {default = []}
%  'r_max' - maximum radius (degrees visual angle) used for eccentricity mapping
%    {default = 12.5}
%  'rf_sizes': vector of receptive field sizes for each visual area
%    {default = [0.66,1.03,1.88]}
%  'rf_slopes': vector of slopes of linear trend of receptive field sizes
%    {default = [0.06,0.10,0.15]}
%  'rf_r_inter': radius value used as intercept at which rf size is rf_sizes
%    {default = 6}
%  'inverse_type': [0|1|2] type of inverse calculations
%    0: unregularized pseudo-inverse (fast, very little memory)
%    1: regularized psuedo-inverse with identity matrix for noise covariance
%       no source covariance matrix (fast, very little memory)
%    2: regularized psuedo-inverse with noise covariance matrix from data
%       depending on ncov_type, uses source covariance matrix
%    {default = 1}
%  'ncov_type': specify what type of noise covariance matrix to use
%     if 0, use identity matrix
%       (assume uniform white noise, independently scaled for each sensor type)
%     if 1, calculate and use noise covariance matrix from average prestim
%     if 2, use noise covariance matrix calculated from single trials
%       (stored in avg_data.noise.covar)
%    {default = 1}
%  'SNR': estimated signal-to-noise-ratio (for regularization parameter)
%      {default = 10}
%  'plotflag' - [0|1|2|3] whether to plot source waveforms and residual error
%     0=no plots
%     1=save plots at end (do not display)
%     2=display plots during offset and nbrhd fitting (do not save)
%     3=do not run RCSE, only save plots from previous run (do not display)
%     {default = 0}
%  'forceflag': [0|1|2] whether to overwrite files
%     0: do nothing (except maybe plots) if output exists
%     1: overwrite results and other output
%     2: overwrite all output, including forward solution
%     {default = 0}
%
% Optional Parameters to Specify Which Stimulus Conditions to Use:
%  'fstem_conds' - stem of csv file containing condition information
%    full path or relative to ContainerPath
%    {default = 'cond_info'}
%  'conditions': vector of condition numbers to analyze
%     {default = []} (if empty, use all conditions found in avg_data.averages)
%  'hemivec' -  vector of hemifield indices (1=right, 2=left)
%    {default = [1 2]}
%  'uplowvec' - vector of upper or lower field indices (1=upper, 2=lower)
%    {default = [1 2]}
%  'eccvec' - vector of eccentricity level indices (1=perifoveal, N=peripheral)
%    If empty, use all available
%    {default = []}
%  'thetavec': vector of "theta" (polar angle) level indices (e.g. [1,6,7,12])
%    1 = polar angle nearest to but greater than 0
%    N = polar angle closest to 360
%     (with N = the number of unique polar angles in fname_conds)
%    If empty, use all available polar angles
%    {default = []}
%  'contvec': vector of contrast level indices (e.g. [1,2,3])
%    If empty, use all available contrast levels
%    {default = []}
%  'sfvec': vector of spatial frequency level indices (e.g. [1,2,3])
%    If empty, use all available spatial frequency levels
%    {default = []}
%  'tfvec': vector of temporal frequency level indices (e.g. [1,2,3])
%    If empty, use all available temporal frequency levels
%    {default = []}
%  'colvec': vector of color type indices (e.g.[1,2,3])
%    If empty, use all available color types
%    {default = []}
%
% Optional Parameters for Nonlinear Optimization
%  'reweight_flag' - [0|1] whether to use iteratively re-weighted least squares
%     {default: 1}
%  'reweight_factor' - tunable reweighting factor or IRLS
%     {default: 2}
%  'offset_niters' - number of iterations for random offset search to fit data
%     {default: 0}
%  'prior_prefix' - prefix of output files from a previous run of RCSE
%     Note: only applicable if offset_niters>0
%     {default: []}
%  'corr_time0' - start of time range (msec) (for prior_prefix)
%     {default: 0}
%  'corr_time1' - end of time range (msec) (for prior_prefix)
%     {default: 170}
%  'err_prefix' - prefix of output files from a previous run of RCSE
%     If supplied, will fit residual error from previous run
%     {default: []}
%  'grid_offset_flag': make offets to grid coordinates u and v (unit grid)
%    (instead of r and th stimulus map offsets)
%    {default = 1}
%  'r_step' - standard deviation of gaussian step size for rand offset search
%    {default = 0.02}
%  'th_step' - standard deviation of gaussian step size for rand offset search
%    {default = 0.02}
%  'r_offset_range' - vector of min and max r_offsets for rand offset search
%    If 0, no bounds
%    {default = [-0.2,0.2]}
%  'th_offset_range' - vector of min and max th_offsets for rand offset search
%    If 0, no bounds
%    {default = [-0.2,0.2]}
%
% For a complete list of options with detailed descriptions, see rc_RCSE
%
% Created:  02/21/11 by Don Hagler
% Last Mod: 12/08/13 by Don Hagler
%

%% todo: badchannames
%% todo: rootoutdir in ContainerPath/RCSE ?

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

errcode = 0;
if ~mmil_check_nargs(nargin,2), return; end;
parms = mmil_args2parms(varargin, { ...
  'proc_prefix','proc',[],...
  'proc_infix',[],[],...
  'prefix','RCSE',[],...
  'infix',[],[],...
  'infix_flag',false,[false true],...
  'transfile','mri2head.trans',[],...
  'badchanfile','badchans.txt',[],...
...
  'forward_matfile',[],[],...
  'indy_locs_flag',false,[false true],...
  'graymid_flag',false,[false true],...
  'calc_dipinfo_flag',true,[false true],...
  'inverse_type',1,[0:2],...
  'ncov_type',1,[0,1,2],...
  'SNR',10,[eps Inf],...
  'plotflag',0,[0 1 2 3],...
  'forceflag',0,[0:2],...
... % conditions
  'fstem_conds','cond_info',[],...
  'cond_offsets_flag',0,[0 1 2],...
  'conditions',[],[],...
  'hemivec',[1,2],[1,1,2],...
  'uplowvec',[1,2],[1,1,2],...
  'eccvec',[],[],...
  'thetavec',[],[],...
  'contvec',[],[],...
  'sfvec',[],[],...
  'tfvec',[],[],...
  'colvec',[],[],...
... % retfit
  'retfit_dir','retfit',[],...
  'retfit_stem','retfit',[],...
  'vf2ctx_flag',true,[false true],...
  'stim_type',2,[0:2],...
  'use_areas',[],[],...
  'r_offset',0,[-100,100],...
  'th_offset',0,[-180,180],...
  'r_max',12.5,[0,Inf],...
  'ecc_width',1,[0,100],...
  'theta_width',10,[0,360],...
  'w_thresh',0.01,[0,100],...
  'vfnorm_flag',true,[false true],...
  'w_thresh_patch',0,[0,1],...
  'single_vertex_flag',0,[0 1 2],...
  'rf_sizes',[0.66,1.03,1.88],[0.01,10],...
  'rf_slopes',[0.06,0.10,0.15],[0,10],...
  'rf_r_inter',6,[0,Inf],...
  'restrict_hemi_flag',false,[false true],...
  'restrict_uplow_flag',false,[false true],...
  'restrict_flag',false,[false true],...
  'retfit_data_flag',false,[false true],...
... % fitting
  'polarity_penalty',0,[-Inf,Inf],...
  'fit_range_flag',false,[false true],...
  'fit_time0',80,[-Inf,Inf],...
  'fit_time1',120,[-Inf,Inf],...
  'fmincon_flag',false,[false true],...
  'offset_niters',0,[0,Inf],...
  'max_offset_niters',Inf,[0,Inf],...
  'offset_mstarts',0,[0,Inf],...
  'mstart_rotsearch_flag',false,[false true],...
  'mstart_rfsearch_flag',false,[false true],...
  'mstart_randstart_flag',true,[false true],...
  'mstart_average_flag',true,[false true],...
  'reweight_flag',true,[false true],...
  'reweight_factor',2,[],...
  'reweight_maxiter',100,[],...
  'reweight_tol',1e-7,[],...
  'reweight_leverage_flag',true,[false true],...
  'reweight_leverage_max_flag',true,[false true],...
  'hybrid_flag',false,[false true],...
  'hybrid_pre_niters',0,[0,Inf],...
  'offset_niters_last',0,[0,Inf],...
  'offset_group_flag',1,[0 1 2 3 4],...
  'offset_group_patches_flag',false,[false true],...
  'offset_group_areas_flag',false,[false true],...
  'offset_const_areas',[],[],...
  'r_step',0.02,[1e-4,10],...
  'th_step',0.02,[1e-4,90],...
  'r_offset_range',[-0.2,0.2],[-100,100],...
  'th_offset_range',[-0.2,0.2],[-180,180],...
  'grid_offset_flag',true,[false true],...
  'grid_offset_smooth',0,[0,1000],...
  'rot_niters',0,[0,Inf],...
  'rot_step',1,[0,180],...
  'rot_max',10,[0,180],...
  'best_rot',[0 0 0],[-180 180],...
  'rscale_niters',0,[0,Inf],...
  'rscale_step',0.01,[0,1],...
  'rscale_range',[0.8,1.2],[0.1,10],...
  'best_rscale',1,[0.1,10],...
  'nbrhd_niters',0,[0,Inf],...
  'nbrhd_full_flag',false,[false true],...
  'prior_prefix',[],[],...
  'prior_weight',0.5,[0,1],...
  'prior_avg_flag',0,[0:3],...
  'prior_mindiff_flag',0,[0 1 2],...
  'prior_zscore_flag',false,[false true],...
  'prior_sem_min',0.5,[eps,100],...
  'prior_indy_wform_flag',false,[false true],...
  'corr_time0',0,[-Inf,Inf],...
  'corr_time1',170,[-Inf,Inf],...
  'best_retmap_prefix',[],[],...
  'err_prefix',[],[],...
  'rf_niters',0,[0,Inf],...
  'rf_min_sizes',[0.1,0.1,0.1],[0.01,10],...
  'rf_max_sizes',[3,3,3],[0.01,10],...
  'rf_min_slopes',[0,0,0],[0,10],...
  'rf_max_slopes',[0.2,0.2,0.2],[0,10],...
  'rf_size_step',0.1,[0.01,10],...
  'rf_slope_step',0.01,[0.001,1],...
  'calc_scalefacts_flag',false,[false true],...
  'bem_flag',true,[false true],...
  'openmeeg_flag',false,[false true],...
  'conductivities',[0.3 0.012 0.3],[],...
  'EEG_gain_scalefact',1,[-Inf Inf],...
  'nlayers',1,[1:4],...
  'bem_surf_files',{'bem/inner_skull4.tri'},[],...
  'grad_scalefact',10^13,[-Inf Inf],...
  'mag_scalefact',10^15,[-Inf Inf],...
  'EEG_scalefact',10^6,[-Inf Inf],...
  'usegrad_flag',true,[false true],...
  'usemag_flag',false,[false true],...
  'useEEG_flag',false,[false true],...
  'indy_smfact',0.999,[0,1],...
  'ecc_smfact',0,[0,1],...
  'upperlower_smfact',0,[0,1],...
  'hemi_smfact',0,[0,1],...
  'loose_flag',false,[false true],...
  'loose_tang_weight',0.5,[0,1],...
  'condF_thresh',0,[],...
  'dip_matfile',[],[],...
  'ret_dips_lh_dec_file',[],[],...
  'ret_dips_rh_dec_file',[],[],...
  'ret_dip_qfield_flag',true,[false true],...
  'nonret_dips_lh_dec_file',[],[],...
  'nonret_dips_rh_dec_file',[],[],...
  'ret_dips_weight',0,[0,1],...
  'nonret_dips_weight',0,[0,1],...
  'norm_weights_flag',2,[0 1 2 3],...
  'area_names',{'v1','v2','v3'},[],...
  'area_colors',{'b','g','r'},[],...
  'plot_outdir','RCSE_plots',[],...
  'plot_normflag',false,[false true],...
  'plot_ylim',[-30,30],[-Inf,Inf],...
  'save_avg_flag',true,[false true],...
  'write_err_flag',false,[false true],...
  'write_fit_flag',false,[false true],...
  'write_areafit_flag',false,[false true],...
  'write_fif_flag',false,[false true],...
  'template_fif',[],[],...
});

% excl_tags are fields that should not be passed to rc_RCSE
excl_tags = {'proc_prefix','proc_infix'};

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% check mri2head registration file
if mmil_isrelative(parms.transfile)
  parms.transfile = [ContainerPath '/' parms.transfile];
end;
if ~exist(parms.transfile,'file')
  fprintf('%s: ERROR: transfile %s not found; run MEG_MMIL_Reg2MRI\n',...
    mfilename,parms.transfile);
  errcode = 1;
  return;
end;

if ~isempty(parms.badchanfile)
  if mmil_isrelative(parms.badchanfile)
    parms.badchanfile = [ContainerPath '/' parms.badchanfile];
  end;
  if ~exist(parms.badchanfile,'file'), parms.badchanfile = []; end;
end;  

% check FSContainerPath
if ~exist(FSContainerPath,'dir')
  fprintf('%s: ERROR: FSContainerPath %s not found\n',mfilename,FSContainerPath);
  errcode = 1;
  return;
end;
[FSRootDir,FSContainerDir,text] = fileparts(FSContainerPath);
if ~isempty(text), FSContainerDir = [FSContainerDir,text]; end;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% load ContainerInfo
[ContainerInfo,errcode] = MMIL_Load_ContainerInfo(ContainerPath);
if errcode, return; end;

% load avg_data
if ~isempty(parms.proc_infix)
  infix = ['_' parms.proc_infix];
else
  nfiles = length(ContainerInfo.input_data_files);
  if nfiles>1
    infix = [];
  else
    infix = '_1';
  end;
end;
fname_proc = sprintf('%s/matfiles/%s_avg_data%s.mat',...
  ContainerPath,parms.proc_prefix,infix);
if ~exist(fname_proc,'file')
  fprintf('%s: ERROR: processed MEG file %s not found\n',mfilename,fname_proc);
  errcode = 1;
  return;
end;
load(fname_proc);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% add/change parms
parms.datamatfile = fname_proc;
if isempty(find(strcmp('eeg',{avg_data.sensor_info.typestring})))
  parms.useEEG_flag = 0;
end;
if ~parms.useEEG_flag
  parms.nlayers = 1;
end;
parms.subjdir = FSRootDir;
parms.rootoutdir = ContainerPath;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% convert parms to cell array of parameter names and argument values
tags = setdiff(fieldnames(parms),excl_tags);
args = mmil_parms2args(parms,tags);

fprintf('%s: running Retinotopy Constrained Source Estimation...\n',mfilename);
rc_RCSE(FSContainerDir,args{:});
fprintf('%s: finished\n',mfilename);

