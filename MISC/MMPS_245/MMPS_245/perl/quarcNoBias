#!/usr/bin/perl

use Getopt::Long;

if ( @ARGV > 0 ) {
    GetOptions('b|t=s'	=> \$baseline,    # baseline or target
	       'f|s=s'	=> \$followup,    # followup or source. Map followup to baseline.
	       'a=s'	=> \$seg,         # aseg
	       'asegPreReg=s' => \$asegPreReg,
	       'invTransf=s'  => \$invTransf,
	       'm=s'	=> \$mask,        # target mask
	       'd=s'	=> \$outDir,
	       'bin=s'	=> \$bin,
	       'p=s'    => \$paramsDir,
	       'c|cort' => \$cortexSeg,   # Just a flag, no argument.
	       'force'  => \$forceRedo,   # Just a flag, no argument.
	       'batch'  => \$batch,       # Just a flag, no argument.
	       'batchDir=s'	=> \$batchDir,
	       'jobTag=s'	=> \$jobTag,
	       'subjID=s'       => \$subjID,
	       'baselineTime=s' => \$baselineTime,
	       'followupTime=s' => \$followupTime,
	       'quick'          => \$QuickAndDirty);
    print "baseline   is $baseline\n";
    print "followup   is $followup\n";
    print "seg        is $seg\n";
    print "asegPreReg is $asegPreReg\n";
    print "mask       is $mask\n";
    print "outDir     is $outDir\n";
    print "bin        is $bin\n";
    print "paramsDir  is $paramsDir\n";
    print "cortexSeg  is $cortexSeg\n";
    print "forceRedo  is $forceRedo\n",        if( defined $forceRedo );
    print "invTransf  is $invTransf\n",        if( defined $invTransf );
    print "batch      is $batch\n",            if( defined $batch );
    print "batchDir   is $batchDir\n",         if( defined $batchDir );
    print "jobTag     is $jobTag\n",           if( defined $jobTag );
    print "subjID     is $subjID\n",           if( defined $subjID );
    print "baselineTime is $baselineTime\n",   if( defined $baselineTime );
    print "followupTime is $followupTime\n",   if( defined $followupTime );
    print "QuickAndDirty is $QuickAndDirty\n", if( defined $QuickAndDirty );
}

if ( !defined $baseline || !defined $followup || (!defined $seg && !defined $mask && !defined $asegPreReg) || !defined $outDir ) {
    die "Need a segmentation file, or a mask if there is no seg file.\nUsage:
quarcNoBias -b baseline.mgz -f followup.mgz -a aseg.mgz -m mask.mgz -d outDirectory
         -bin binDir -p paramsDir -c -force -quick\n";
}


if( !-e $baseline || !-e $followup || ( !-e $seg && !-e $mask && !defined $asegPreReg ) ) {
   #print "baseline   $baseline   missing\n" if( !-e $baseline );
   #print "followup   $followup   missing\n" if( !-e $followup );
   #print "seg        $seg        missing\n" if( !-e $seg );
   #print "asegPreReg $asegPreReg missing\n" if( !-e $asegPreReg );
   #print "mask       $mask       missing\n" if( !-e $mask && !-e $seg );
   #print "Note: Need a segmentation file OR a mask if there is no seg file.\n";
    
    die "baseline   $baseline   missing\n" if( !-e $baseline );
    die "followup   $followup   missing\n" if( !-e $followup );
    die "seg        $seg        missing\n" if( !-e $seg             && ( !-e $seg && !-e $mask && !defined $asegPreReg ) );
    die "asegPreReg $asegPreReg missing\n" if( !defined $asegPreReg && ( !-e $seg && !-e $mask && !defined $asegPreReg ) );
    die "mask       $mask       missing\n" if( !-e $mask            && ( !-e $seg && !-e $mask && !defined $asegPreReg ) );
   #die "Note: Need a segmentation file OR a mask if there is no seg file.\n";
    die "$subjID: essential stuff missing.\n";
}

# FORWARD
$outDirForward = "$outDir/f2b";
#$cmd = "/home/holland/ADNI/quarc -batch -batchDir $batchDir -subjID $subjID -baselineTime $baselineTime -followupTime $followupTime -b $baseline -f $followup -a $seg -d $outDir -p $paramsDir";
 $cmd = "quarc -b $baseline -f $followup -a $seg -d $outDirForward -bin $bin -p $paramsDir";
#print "Executing \n$cmd\n";
`$cmd`;

# REVERSE
$outDirReverse = "$outDir/b2f";
#$cmd1 = "/home/holland/ADNI/quarc -batch -batchDir $batchDir -jobTag registerRev -subjID $subjID";
#$cmd2 = "-baselineTime $followupTime -followupTime $baselineTime -b $followup";
#$cmd3 = "-f $baseline -asegPreReg $seg -d $outDir -p $paramsDir -invTransf $outDirForward";

 $cmd1 = "quarc -jobTag registerRev";
 $cmd2 = "-b $followup";
 $cmd3 = "-f $baseline -asegPreReg $seg -d $outDirReverse -invTransf $outDirForward -bin $bin -p $paramsDir";

$cmd  = "$cmd1 $cmd2 $cmd3";
#print "Executing \n$cmd\n";
`$cmd`;
