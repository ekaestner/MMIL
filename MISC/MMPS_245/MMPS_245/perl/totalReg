#!/usr/bin/perl

# Comment out next line to prevent redoing what has already been done.
#$forceRedo   = "1";

# Comment out for production job...
#$QuickAndDirty = 1;

$inormRefine = "1";
#$nlrStandard = "1";
#$nlrFine     = "1";
$nlrROI      = "1";

$jobTag     = "register";
$commandDir = `pwd`;

$bin       = "/home/holland/bin";         # Default. Override on cmd line
$paramsDir = "/home/holland/ADNI/params"; # Default. Override on cmd line
$touchFile = ".complete";
$touchFileCSV = ".completeCSV";
$touchFileCortCSV = ".completeCortCSV";

use Getopt::Long;

if ( @ARGV > 0 ) {
    GetOptions('b|t=s'	=> \$baseline,    # baseline or target
	       'f|s=s'	=> \$followup,    # followup or source. Map followup to baseline.
	       'a=s'	=> \$seg,         # aseg
	       'm=s'	=> \$mask,        # target mask
	       'd=s'	=> \$outDir,
	       'bin=s'	=> \$bin,
	       'p=s'    => \$paramsDir,
	       'c|cort' => \$cortexSeg,   # Just a flag, no argument.
	       'force'  => \$forceRedo,   # Just a flag, no argument.
	       'quick'  => \$QuickAndDirty);
    print "baseline  is $baseline\n";
    print "followup  is $followup\n";
    print "seg       is $seg\n";
    print "mask      is $mask\n";
    print "outDir    is $outDir\n";
    print "bin       is $bin\n";
    print "paramsDir is $paramsDir\n";
    print "cortexSeg is $cortexSeg\n";
    print "forceRedo is $forceRedo\n"         if( defined $forceRedo );
    print "QuickAndDirty is $QuickAndDirty\n" if( defined $QuickAndDirty );
}

if ( !defined $baseline || !defined $followup || (!defined $seg && !defined $mask ) || !defined $outDir ) {
    die "Need a segmentation file, or a mask if there is no seg file.\nUsage:
totalReg -b baseline.mgz -f followup.mgz -a aseg.mgz -m mask.mgz -d outDirectory
         -bin binDir -p paramsDir -c -force -quick\n";
}

if( !-e $baseline || !-e $followup || ( !-e $seg && !-e $mask ) ) {
    print "baseline  $baseline  missing\n" if( !-e $baseline );
    print "followup  $followup  missing\n" if( !-e $followup );
    print "seg       $seg       missing\n" if( !-e $seg );
    print "mask      $mask      missing\n" if( !-e $mask && !-e $seg );
    print "Note: Need a segmentation file OR a mask if there is no seg file.\n";
    die "Essential stuff missing.\n";
}


$_ = $baseline;     # Set the default $_ for matching against.
if(/\.\w+$/) {      # Matches suffix, including ".", in $baseline, e.g., ".mgz".
   #print "Matched: |$`<$&>$'|\n";
    $baselineSuffix = $&;
    if( $baselineSuffix eq ".mgh" ) {
	$baselineUncompressed = "1";
    }
                    # Reset the default $_ for matching against:
    $_ = $`;        # everything in $baseline before suffix (may include directory path).
    if(/[^\/]+$/) { # Matches prefix of $baseline, i.e., with any directory path stripped.
       #print "Matched: |$`<$&>$'|\n";
	$baselinePrefix = $&;
    } else {
	$baselinePrefix = $_;
    }
} else {
    die "Could not parse $baseline.\n";
}

$_ = $followup;     # Set the default $_ for matching against.
if(/\.\w+$/) {      # Matches suffix, including ".", in $followup, e.g., ".mgz".
   #print "Matched: |$`<$&>$'|\n";
    $followupSuffix = $&;
    if( $followupSuffix eq ".mgh" ) {
	$followupUncompressed = "1";
    }
                    # Reset the default $_ for matching against:
    $_ = $`;        # everything in $followup before suffix (may include directory path).
    if(/[^\/]+$/) { # Matches prefix of $followup, i.e., with any directory path stripped.
       #print "Matched: |$`<$&>$'|\n";
	$followupPrefix = $&;
    } else {
	$followupPrefix = $_;
    }
} else {
    die "Could not parse $followup.\n";
}
#print "baselinePrefix = $baselinePrefix\n";
#print "baselineSuffix = $baselineSuffix\n";
#print "followupPrefix = $followupPrefix\n";
#print "followupSuffix = $followupSuffix\n";

if( defined $QuickAndDirty ) {
    $inormRefine = undef;
    $nlrROI      = undef;
}

if( defined($nlrFine) ) {
    $nlrStandard = "1";
}
if( defined($nlrROI) ) {
    $nlrStandard = "1";
    $nlrFine     = "1";
}

$exeReg       = "$bin/reg";
$exeROIdv     = "$bin/roiDv";
$exeCortROIdv = "$bin/cortRoiDv";
$exeMask      = "$bin/brainMaskFromSeg";
$exeBroadMask = $exeMask;

die "Executables do not exist.\n" if ( !-e $exeReg || !-e $exeROIdv || !-e $exeMask );

$headFilePrefix = "head";
$headFileSuffix = ".mgz";
$headFile       = "${headFilePrefix}$headFileSuffix";

$maskFilePrefix = "mask";
$maskFileSuffix = ".mgz";
$maskFile       = "$maskFilePrefix$maskFileSuffix";

$scaleFieldFile = "sf.mgz";

$maskBroadFilePrefix = "maskBroad";
$maskBroadFile       = "$maskBroadFilePrefix$maskFileSuffix";

#$subjOutDirPrefix     = "CYCBI";
$baselineOutDir       = "target";
$affRegDir            = "affReg";
$iNormDir             = "inorm";
$nonlinRegEstimateDir = "nonlinRegEstimate";
$nonlinRegStandardDir = "nonlinRegStandard";
$nonlinRegFineDir     = "nonlinRegFine";
$nonlinRegROIDir      = "nonlinRegROI";
$roiDvFile            = "ROIdv.csv";
$cortRoiDvFile        = "cortROIdv.csv";

$nflowEstimate = 4;
$nflowStandard = 4;
$nflowFine     = 5;
$nflowROI      = 6;
$thresholdROIMask = 0.8;   # >=0, <=1. The larger the value, the smaller the mask.

$inputParamsScale           = "$paramsDir/inputParamsScale.txt";
$inputParamsFileINorm1      = "$paramsDir/inputParamsNormIntensities01.txt";
$inputParamsFileINorm2      = "$paramsDir/inputParamsNormIntensities02.txt";
$inputParamsFileRegEstimate = "$paramsDir/inputParamsNonLinRegEstimate.txt";
$inputParamsFileRegStandard = "$paramsDir/inputParamsNonLinRegStandard.txt";
$inputParamsFileRegFine     = "$paramsDir/inputParamsNonLinRegFine.txt";
$inputParamsFileRegROI1     = "$paramsDir/inputParamsNonLinRegROI01.txt";
$inputParamsFileRegROI2     = "$paramsDir/inputParamsNonLinRegROI02.txt";

$baselineOutPDir       = "$outDir/$baselineOutDir";
$affRegPDir            = "$outDir/$affRegDir";
$iNormPDir             = "$outDir/$iNormDir";
$nonlinRegEstimatePDir = "$outDir/$nonlinRegEstimateDir";
$nonlinRegStandardPDir = "$outDir/$nonlinRegStandardDir";
$nonlinRegFinePDir     = "$outDir/$nonlinRegFineDir";
$nonlinRegROIPDir      = "$outDir/$nonlinRegROIDir";

$followupAR = "$affRegPDir/$headFile";
$scaleField = "$iNormPDir/$scaleFieldFile";

$touchB  = "$baselineOutPDir/$touchFile";
$touchSI = "$baselineOutPDir/${touchFile}SI"; # standardize intensities

$touchAR  = "$affRegPDir/$touchFile";
$touchSF1 = "$iNormPDir/${touchFile}1";
$touchSF2 = "$iNormPDir/${touchFile}2";

$touchNLE = "$nonlinRegEstimatePDir/$touchFile";
$touchNLS = "$nonlinRegStandardPDir/$touchFile";
$touchNLF = "$nonlinRegFinePDir/$touchFile";
$touchNLR = "$nonlinRegROIPDir/$touchFile";

$touchNLEcsv = "$nonlinRegEstimatePDir/$touchFileCSV";
$touchNLScsv = "$nonlinRegStandardPDir/$touchFileCSV";
$touchNLFcsv = "$nonlinRegFinePDir/$touchFileCSV";
$touchNLRcsv = "$nonlinRegROIPDir/$touchFileCSV";

$touchCortNLEcsv = "$nonlinRegEstimatePDir/$touchFileCortCSV";
$touchCortNLScsv = "$nonlinRegStandardPDir/$touchFileCortCSV";
$touchCortNLFcsv = "$nonlinRegFinePDir/$touchFileCortCSV";

$standardizeI = 1; # Standardize baseline intensities, then standardize followup to baseline.

if( ( !defined $standardizeI || (defined $standardizeI && -e $touchSI && -e $touchB) ) &&
    ( !defined $baselineUncompressed || (defined $baselineUncompressed && -e $touchB ) )  &&
    -e "$followupAR"                       && -e $touchAR  &&
    -e "$scaleField"                       && -e $touchSF1 &&
    -e "$nonlinRegEstimatePDir/dv.mgz"     && -e $touchNLE &&
    ( !defined $cortexSeg || (defined $cortexSeg &&
			      -e "$nonlinRegEstimatePDir/$cortRoiDvFile" && -e $touchCortNLEcsv) ) &&
    
    ( defined $QuickAndDirty || (!defined $QuickAndDirty &&
				 -e "$scaleField"                       && -e $touchSF2 &&
				 -e "$nonlinRegStandardPDir/dv.mgz"     && -e $touchNLS &&
				 -e "$nonlinRegFinePDir/dv.mgz"         && -e $touchNLF &&
				 -e "$nonlinRegROIPDir/dv.mgz"          && -e $touchNLR &&
				 -e "$nonlinRegEstimatePDir/$roiDvFile" && -e $touchNLEcsv &&
				 -e "$nonlinRegStandardPDir/$roiDvFile" && -e $touchNLScsv &&
				 -e "$nonlinRegFinePDir/$roiDvFile"     && -e $touchNLFcsv &&
				 -e "$nonlinRegROIPDir/$roiDvFile"      && -e $touchNLRcsv &&
				 ( !defined $cortexSeg || (defined $cortexSeg &&
							   -e "$nonlinRegEstimatePDir/$cortRoiDvFile" && -e $touchCortNLEcsv &&
							   -e "$nonlinRegStandardPDir/$cortRoiDvFile" && -e $touchCortNLScsv &&
							   -e "$nonlinRegFinePDir/$cortRoiDvFile"     && -e $touchCortNLFcsv )  ) ) ) ) {
    die "Nothing to do.\n" if !defined($forceRedo);
}

$batchJobsDir = "$outDir/batchJobs/$jobTag";
if( ! -d $batchJobsDir ) {
    $cmd = "mkdir -p $batchJobsDir";
    `$cmd`;
}

$batchErrStdoDir = "$outDir/batchReports/$jobTag";
if( ! -d $batchErrStdoDir ) {
    `mkdir -p $batchErrStdoDir`;
}

#$jobName  = "R${subjID}_$followupTime";
$subjID   = "$followupPrefix"; # "noname";
$jobName  = "regScript";
$jobFName = "$batchJobsDir/$jobName";
`rm -f $batchErrStdoDir/$jobName*`;

open JOBFILE, "> $jobFName"
    or die "Cannot create $jobFName: $!";

print JOBFILE "#!/bin/csh\n";
print JOBFILE "#\$ -N $jobName\n";
print JOBFILE "#\$ -hard -l h_vmem=4G\n";               # 4GB per job
print JOBFILE "#\$ -e $batchErrStdoDir/\$JOB_NAME\n";
print JOBFILE "#\$ -o $batchErrStdoDir/\$JOB_NAME\n";
print JOBFILE "#\$ -V\n";
print JOBFILE "#\$ -cwd\n\n";

if( defined($forceRedo) ) {
    print JOBFILE "rm -rf $baselineOutPDir \n";
    print JOBFILE "rm -rf $affRegPDir \n";
    print JOBFILE "rm -rf $iNormPDir  \n";
    print JOBFILE "rm -rf $outDir/nonlinReg* \n\n";
}

if( !-e $mask ) { # Either not supplied on command line, OR was supplied on cmd line but does not actually exists.
    $useMaskFromSeg = 1;
    $mask  = "$baselineOutPDir/$maskFile";              # Make a new mask and call it this.
}
$maskBroad = "$baselineOutPDir/$maskBroadFile";

if( !-d $baselineOutPDir || defined($forceRedo) ) {
    print JOBFILE "mkdir -p $baselineOutPDir \n";
}

if( ( !-e $mask || ($useMaskFromSeg && defined($forceRedo)) ) && -e $seg) {
    print JOBFILE "$exeMask \\\n $seg \\\n $mask \n\n"; # Make the new mask.
}


if( !-e $followupAR || !-e $touchAR || defined $forceRedo ) {
    
    if( !-e $maskBroad || !-e $touchAR || defined $forceRedo ) {
	print JOBFILE "$exeBroadMask \\\n $mask \\\n $maskBroad \n\n";
    }
    
    print JOBFILE "$exeReg \\\n";
    print JOBFILE " -rr -rrf -ar -sinc \\\n";
    print JOBFILE " -ip $inputParamsScale \\\n";
    print JOBFILE " -od $affRegPDir \\\n";
    print JOBFILE " -s  $followup\\\n";
    print JOBFILE " -t  $baseline \\\n";
    print JOBFILE " -tm $maskBroad \n\n";
    
    $followupARtmp = "$affRegPDir/${followupPrefix}_AffReg$followupSuffix";
    if( defined $followupUncompressed ) {
	print JOBFILE "mv      $followupARtmp \\\n";
	print JOBFILE "        $affRegPDir/${followupPrefix}_AffReg \n";
	print JOBFILE "gzip -f $affRegPDir/${followupPrefix}_AffReg -S $headFileSuffix \n";
    }
    
    print JOBFILE "mv -f $affRegPDir/${followupPrefix}_AffReg$headFileSuffix \\\n";
    print JOBFILE "      $followupAR \n";
    print JOBFILE "touch $touchAR \n\n";
}
$followup = "$followupAR";


$copyOrMove = "cp -p ";
if( defined $standardizeI ) {
    $copyOrMove = "mv ";
}

if( defined $standardizeI && ( (!-e $touchSI && !-e "$baselineOutPDir/$headFilePrefix$headFileSuffix") || defined $forceRedo ) ) {
    print JOBFILE "$exeReg \\\n";
    print JOBFILE " -od $affRegPDir \\\n";
    print JOBFILE " -standardizeI   \\\n";
    print JOBFILE " -ip $inputParamsScale \\\n";
    print JOBFILE " -s  $followup   \\\n";
    print JOBFILE " -t  $baseline   \\\n";
    print JOBFILE " -tm $mask \n\n";
    
    print JOBFILE "mv -f $affRegPDir/${headFilePrefix}_GlobalIntensityNorm$headFileSuffix \\\n";
    print JOBFILE "      $followup \n";
    print JOBFILE "touch $touchSI \n\n";
    
    $baseline = "$affRegPDir/${baselinePrefix}_TGlobalIntensityNorm$baselineSuffix";
} elsif ( defined $standardizeI && -e $touchSI ) {
    $baseline = "$affRegPDir/${baselinePrefix}_TGlobalIntensityNorm$baselineSuffix";
}

if( defined $baselineUncompressed && ( !-e $touchB || defined $forceRedo ) ) {
    print JOBFILE "$copyOrMove $baseline \\\n";
    print JOBFILE "$baselineOutPDir/$headFilePrefix \n";
    print JOBFILE "gzip -f $baselineOutPDir/$headFilePrefix -S $headFileSuffix \n";
    print JOBFILE "touch $touchB \n\n";
    $baseline = "$baselineOutPDir/$headFilePrefix$headFileSuffix"; # Delete at end if intensity was NOT standardized.
    $baselinePrefix = $headFilePrefix;
    $baselineSuffix = $headFileSuffix;
} elsif( defined $standardizeI && ( !-e $touchB || defined $forceRedo ) ) {
    print JOBFILE "$copyOrMove $baseline \\\n";
    print JOBFILE "$baselineOutPDir/$headFilePrefix$headFileSuffix \n";
    print JOBFILE "touch $touchB \n\n";
    $baseline = "$baselineOutPDir/$headFilePrefix$headFileSuffix";
    $baselinePrefix = $headFilePrefix;
    $baselineSuffix = $headFileSuffix;
}
if( ( defined $baselineUncompressed || defined $standardizeI ) && -e $touchB ) {
    $baseline = "$baselineOutPDir/$headFilePrefix$headFileSuffix";
    $baselinePrefix = $headFilePrefix;
    $baselineSuffix = $headFileSuffix;
}


if( !-e $scaleField || !-e "$iNormPDir/${headFilePrefix}.mgz" || !-e $touchSF1 || ($inormRefine && !-e $touchSF2) || defined $forceRedo) {
    # Normalize followup while mapping baseline to followup.
    # Desired output is normalized followup.
    print JOBFILE "$exeReg \\\n";
    print JOBFILE " -ip $inputParamsFileINorm1 \\\n";
    print JOBFILE " -od $iNormPDir \\\n";
    print JOBFILE " -s  $followup \\\n";
    print JOBFILE " -t  $baseline \\\n";
    print JOBFILE " -sm $mask \\\n";
    print JOBFILE " -tm $mask \n\n";
    
    $baselineNLRTmp  = "$iNormPDir/${baselinePrefix}_Tnlr$headFileSuffix";
    $followupNormTmp = "$iNormPDir/${headFilePrefix}_Sinorm$headFileSuffix";
    $followupNormNew = "$iNormPDir/${headFilePrefix}$headFileSuffix";
    print JOBFILE "rm -f $baselineNLRTmp \n";
    print JOBFILE "mv -f $followupNormTmp \\\n";
    print JOBFILE "      $followupNormNew \n";
    print JOBFILE "touch $touchSF1 \n\n";
    
    if( $inormRefine ) {
	print JOBFILE "rm -f $scaleField \n";
	$maskBroad = "$iNormPDir/maskBroad.mgz"; # Just made by previous command.
	
	# Map baseline to normalized followup ($followupNormNew),
	# writing out result $baselineNLRNew in followup space.
	print JOBFILE "$exeReg \\\n";
	print JOBFILE " -ip $inputParamsFileRegEstimate \\\n";
	print JOBFILE " -od $iNormPDir \\\n";
	print JOBFILE " -t  $followupNormNew \\\n";
	print JOBFILE " -s  $baseline \\\n";
	print JOBFILE " -tm $maskBroad \\\n";
	print JOBFILE " -nflow $nflowEstimate \n\n";
	
	$baselineNLRTmp = "$iNormPDir/${baselinePrefix}_NonLinReg$headFileSuffix";
	$baselineNLRNew = "$iNormPDir/baselineNLR$headFileSuffix";
	print JOBFILE "mv -f $baselineNLRTmp \\\n";
	print JOBFILE "      $baselineNLRNew \n";
	print JOBFILE "rm -f $iNormPDir/di.mgz \n";
	print JOBFILE "rm -f $iNormPDir/dv.mgz \n";
	print JOBFILE "rm -f $iNormPDir/dx.mgz \n";
	print JOBFILE "rm -f $iNormPDir/dy.mgz \n";
	print JOBFILE "rm -f $iNormPDir/dz.mgz \n\n";
	
	# Normalize, again, the original followup, while mapping baselineNLRNew to original followup. 
	# Desired output is, again, normalized followup.
	print JOBFILE "$exeReg \\\n";
	print JOBFILE " -ip $inputParamsFileINorm2 \\\n";
	print JOBFILE " -od $iNormPDir \\\n";
	print JOBFILE " -s  $followup \\\n";
	print JOBFILE " -t  $baselineNLRNew \\\n";
	print JOBFILE " -sm $mask \\\n";
	print JOBFILE " -tm $mask \n\n";
	
	$baselineNLRTmp = "$iNormPDir/baselineNLR_Tnlr.mgz";
	print JOBFILE "rm -f $baselineNLRTmp \n";
	print JOBFILE "rm -f $baselineNLRNew \n";
	print JOBFILE "rm -f $maskBroad \n";
	
	$followupNormTmp = "$iNormPDir/${headFilePrefix}_Sinorm.mgz";
	$followupNormNew = "$iNormPDir/${headFilePrefix}.mgz";
	print JOBFILE "mv -f $followupNormTmp \\\n";
	print JOBFILE "      $followupNormNew \n";
	print JOBFILE "touch $touchSF2 \n\n";
    }
}
# This is the intensity-normalized followup:
$followup= "$iNormPDir/${headFilePrefix}.mgz";


if ( !-e "$nonlinRegEstimatePDir/dv.mgz" || !-e $touchNLE || defined $forceRedo ) {
    
    # Map intensity-normalized followup to original
    # baseline, naturally writing out result in baseline
    # space. NOTE: The displacement field and the volume-change
    # field are, naturally, written out in the baseline space.
    # The interpretation of the dv-field, therefore, is what
    # happens to that voxel in the baseline to make it align with
    # the appropriate volume element in the followup image. So, if
    # the followup is bigger than the baseline, then the baseline
    # voxel EXPANDS into the appropriate volume element in the
    # followup; i.e., the dv-field will be red not blue!
    
    print JOBFILE "$exeReg \\\n";
    print JOBFILE " -ip $inputParamsFileRegEstimate \\\n";
    print JOBFILE " -od $nonlinRegEstimatePDir \\\n";
    print JOBFILE " -s  $followup\\\n";
    print JOBFILE " -t  $baseline \\\n";
    print JOBFILE " -tm $mask \\\n";
    print JOBFILE " -nflow $nflowEstimate \n\n";
    
    $baselineNLRTmp = "$nonlinRegEstimatePDir/${headFilePrefix}_NonLinReg.mgz";
    $baselineNLRNew = "$nonlinRegEstimatePDir/${headFilePrefix}.mgz";
    print JOBFILE "mv -f $baselineNLRTmp \\\n";
    print JOBFILE "      $baselineNLRNew \n";
    print JOBFILE "touch $touchNLE \n\n";
}

if ( ( !-e "$nonlinRegEstimatePDir/$roiDvFile" || !-e $touchNLEcsv || defined $forceRedo ) && -e $seg ) {
    print JOBFILE "$exeROIdv \\\n";
    print JOBFILE " -s  $subjID \\\n";
    print JOBFILE " -o  $nonlinRegEstimatePDir/$roiDvFile \\\n";
    print JOBFILE " -a  $seg \\\n";
    print JOBFILE " -dv $nonlinRegEstimatePDir/dv.mgz \\\n";
    print JOBFILE " -t  $thresholdROIMask \n\n";
    print JOBFILE "touch $touchNLEcsv \n\n";
}

if ( defined $cortexSeg && ( !-e "$nonlinRegEstimatePDir/$cortRoiDvFile" || !-e $touchCortNLEcsv || defined $forceRedo ) && -e $seg ) {
    print JOBFILE "$exeCortROIdv \\\n";
    print JOBFILE " -s  $subjID \\\n";
    print JOBFILE " -o  $nonlinRegEstimatePDir/$cortRoiDvFile \\\n";
    print JOBFILE " -a  $seg \\\n";
    print JOBFILE " -dv $nonlinRegEstimatePDir/dv.mgz \n\n";
    print JOBFILE "touch $touchCortNLEcsv \n\n";
}


if ( (!-e "$nonlinRegStandardPDir/dv.mgz" || !-e $touchNLS || defined $forceRedo) && defined $nlrStandard ) {
    $dx = "$nonlinRegEstimatePDir/dx.mgz";
    $dy = "$nonlinRegEstimatePDir/dy.mgz";
    $dz = "$nonlinRegEstimatePDir/dz.mgz";
    
    print JOBFILE "$exeReg \\\n";
    print JOBFILE " -ip $inputParamsFileRegStandard \\\n";
    print JOBFILE " -od $nonlinRegStandardPDir \\\n";
    print JOBFILE " -s  $followup\\\n";
    print JOBFILE " -t  $baseline \\\n";
    print JOBFILE " -tm $mask \\\n";
    print JOBFILE " -nflow $nflowStandard \\\n";
    print JOBFILE " -restart \\\n";
    print JOBFILE " -dx $dx \\\n";
    print JOBFILE " -dy $dy \\\n";
    print JOBFILE " -dz $dz \n\n";
    
    $baselineNLRTmp = "$nonlinRegStandardPDir/${headFilePrefix}_NonLinReg.mgz";
    $baselineNLRNew = "$nonlinRegStandardPDir/${headFilePrefix}.mgz";
    print JOBFILE "mv -f $baselineNLRTmp \\\n";
    print JOBFILE "      $baselineNLRNew \n\n";
    print JOBFILE "touch $touchNLS \n\n";
}

if ( (!-e "$nonlinRegStandardPDir/$roiDvFile" || !-e $touchNLScsv || defined $forceRedo) && defined $nlrStandard && -e $seg ) {
    print JOBFILE "$exeROIdv \\\n";
    print JOBFILE " -s  $subjID \\\n";
    print JOBFILE " -o  $nonlinRegStandardPDir/$roiDvFile \\\n";
    print JOBFILE " -a  $seg \\\n";
    print JOBFILE " -dv $nonlinRegStandardPDir/dv.mgz \\\n";
    print JOBFILE " -t  $thresholdROIMask \n";
    print JOBFILE "touch $touchNLScsv \n\n";
}

if ( defined $cortexSeg && ( !-e "$nonlinRegStandardPDir/$cortRoiDvFile" || !-e $touchCortNLScsv || defined $forceRedo ) && defined $nlrStandard && -e $seg ) {
    print JOBFILE "$exeCortROIdv \\\n";
    print JOBFILE " -s  $subjID \\\n";
    print JOBFILE " -o  $nonlinRegStandardPDir/$cortRoiDvFile \\\n";
    print JOBFILE " -a  $seg \\\n";
    print JOBFILE " -dv $nonlinRegStandardPDir/dv.mgz \n\n";
    print JOBFILE "touch $touchCortNLScsv \n\n";
}


if ( (!-e "$nonlinRegFinePDir/dv.mgz" || !-e $touchNLF || defined $forceRedo) && defined $nlrFine ) {
    $dx = "$nonlinRegStandardPDir/dx.mgz";
    $dy = "$nonlinRegStandardPDir/dy.mgz";
    $dz = "$nonlinRegStandardPDir/dz.mgz";
    
    print JOBFILE "$exeReg \\\n";
    print JOBFILE " -ip $inputParamsFileRegFine \\\n";
    print JOBFILE " -od $nonlinRegFinePDir \\\n";
    print JOBFILE " -s  $followup\\\n";
    print JOBFILE " -t  $baseline \\\n";
    print JOBFILE " -tm $mask \\\n";
    print JOBFILE " -nflow $nflowFine \\\n";
    print JOBFILE " -restart \\\n";
    print JOBFILE " -dx $dx \\\n";
    print JOBFILE " -dy $dy \\\n";
    print JOBFILE " -dz $dz \\\n";
    print JOBFILE " -rescale -rescaleFac 2.0 \n\n";
    
    $baselineNLRTmp = "$nonlinRegFinePDir/${headFilePrefix}_NonLinReg.mgz";
    $baselineNLRNew = "$nonlinRegFinePDir/${headFilePrefix}.mgz";
    print JOBFILE "mv -f $baselineNLRTmp \\\n";
    print JOBFILE "      $baselineNLRNew \n";
    print JOBFILE "touch $touchNLF \n\n";
}

if ( (!-e "$nonlinRegFinePDir/$roiDvFile" || !-e $touchNLFcsv || defined $forceRedo) && defined $nlrFine && -e $seg) {
    print JOBFILE "$exeROIdv \\\n";
    print JOBFILE " -s  $subjID \\\n";
    print JOBFILE " -o  $nonlinRegFinePDir/$roiDvFile \\\n";
    print JOBFILE " -a  $seg \\\n";
    print JOBFILE " -dv $nonlinRegFinePDir/dv.mgz \\\n";
    print JOBFILE " -t  $thresholdROIMask \n";
    print JOBFILE "touch $touchNLFcsv \n\n";
}

if ( defined $cortexSeg && ( !-e "$nonlinRegFinePDir/$cortRoiDvFile" || !-e $touchCortNLFcsv || defined $forceRedo ) && defined $nlrFine && -e $seg ) {
    print JOBFILE "$exeCortROIdv \\\n";
    print JOBFILE " -s  $subjID \\\n";
    print JOBFILE " -o  $nonlinRegFinePDir/$cortRoiDvFile \\\n";
    print JOBFILE " -a  $seg \\\n";
    print JOBFILE " -dv $nonlinRegFinePDir/dv.mgz \n\n";
    print JOBFILE "touch $touchCortNLFcsv \n\n";
}


if ( (!-e "$nonlinRegROIPDir/dv.mgz" || !-e $touchNLR || defined $forceRedo) && defined $nlrROI && -e $seg ) {
    $dx = "$nonlinRegFinePDir/dx.mgz";
    $dy = "$nonlinRegFinePDir/dy.mgz";
    $dz = "$nonlinRegFinePDir/dz.mgz";
    
    print JOBFILE "$exeReg \\\n";
    print JOBFILE " -ip $inputParamsFileRegROI1 \\\n";
    print JOBFILE " -od $nonlinRegROIPDir \\\n";
    print JOBFILE " -s  $followup\\\n";
    print JOBFILE " -t  $baseline \\\n";
    print JOBFILE " -tm $mask \\\n";
    print JOBFILE " -nflow $nflowROI \\\n";
    print JOBFILE " -restart \\\n";
    print JOBFILE " -dx $dx \\\n";
    print JOBFILE " -dy $dy \\\n";
    print JOBFILE " -dz $dz \\\n";
    print JOBFILE " -rescale -rescaleFac 2.5 \\\n";
    print JOBFILE " -ta $seg \\\n";
    print JOBFILE " -regROI \n\n";
    
    print JOBFILE "$exeReg \\\n";
    print JOBFILE " -ip $inputParamsFileRegROI2 \\\n";
    print JOBFILE " -od $nonlinRegROIPDir \\\n";
    print JOBFILE " -s  $followup\\\n";
    print JOBFILE " -t  $baseline \\\n";
    print JOBFILE " -tm $mask \\\n";
    print JOBFILE " -nflow $nflowROI \\\n";
    print JOBFILE " -restart \\\n";
    print JOBFILE " -dx $dx \\\n";
    print JOBFILE " -dy $dy \\\n";
    print JOBFILE " -dz $dz \\\n";
    print JOBFILE " -rescale -rescaleFac 2.5 \\\n";
    print JOBFILE " -ta $seg \\\n";
    print JOBFILE " -regROI \n";
    
    print JOBFILE "touch $touchNLR \n\n";
}

if ( (!-e "$nonlinRegROIPDir/$roiDvFile" || !-e $touchNLRcsv || defined $forceRedo) && defined $nlrROI && -e $seg) {
    print JOBFILE "$exeROIdv \\\n";
    print JOBFILE " -o  $nonlinRegROIPDir/$roiDvFile \\\n";
    print JOBFILE " -a  $seg \\\n";
    print JOBFILE " -r  5 \\\n";
    print JOBFILE " -dv $nonlinRegROIPDir/dv.mgz \\\n";
    print JOBFILE " -t  $thresholdROIMask \n\n";
    
    print JOBFILE "$exeROIdv \\\n";
    print JOBFILE " -o  $nonlinRegROIPDir/$roiDvFile \\\n";
    print JOBFILE " -a  $seg \\\n";
    print JOBFILE " -r  17 \\\n";
    print JOBFILE " -dv $nonlinRegROIPDir/dv.mgz \\\n";
    print JOBFILE " -t  $thresholdROIMask \n\n";
    
    print JOBFILE "$exeROIdv \\\n";
    print JOBFILE " -o  $nonlinRegROIPDir/$roiDvFile \\\n";
    print JOBFILE " -a  $seg \\\n";
    print JOBFILE " -r  18 \\\n";
    print JOBFILE " -dv $nonlinRegROIPDir/dv.mgz \\\n";
    print JOBFILE " -t  $thresholdROIMask \n\n";
    
    print JOBFILE "$exeROIdv \\\n";
    print JOBFILE " -o  $nonlinRegROIPDir/$roiDvFile \\\n";
    print JOBFILE " -a  $seg \\\n";
    print JOBFILE " -r  44 \\\n";
    print JOBFILE " -dv $nonlinRegROIPDir/dv.mgz \\\n";
    print JOBFILE " -t  $thresholdROIMask \n\n";
    
    print JOBFILE "$exeROIdv \\\n";
    print JOBFILE " -o  $nonlinRegROIPDir/$roiDvFile \\\n";
    print JOBFILE " -a  $seg \\\n";
    print JOBFILE " -r  53 \\\n";
    print JOBFILE " -dv $nonlinRegROIPDir/dv.mgz \\\n";
    print JOBFILE " -t  $thresholdROIMask \n\n";
    
    print JOBFILE "$exeROIdv \\\n";
    print JOBFILE " -o  $nonlinRegROIPDir/$roiDvFile \\\n";
    print JOBFILE " -a  $seg \\\n";
    print JOBFILE " -r  54 \\\n";
    print JOBFILE " -dv $nonlinRegROIPDir/dv.mgz \\\n";
    print JOBFILE " -t  $thresholdROIMask \n";
    
    print JOBFILE "touch $touchNLRcsv \n\n";
}

if( defined $baselineUncompressed && !defined $baselineIntensityStandardized ) {
    print JOBFILE "rm -f $outDir/$baselinePrefix$headFileSuffix \n";
}

close JOBFILE;

#chdir $batchJobsDir;
#print "Submitting $jobName\n";
#`qsub $jobName`;
#chdir $commandDir;

# OR pass $jobName to calling script and have IT run $jobName...
chmod 0775, $jobFName;
$cmd = "$jobFName";            # "./$jobFName";
print "Executing $jobFName\n";
`$cmd`;
