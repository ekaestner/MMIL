The following syntax was developed to allow for the following features:
- allow for strict event sequence specification (one event followed by another, no intervening events))
	1->2->3=4
- allow for "loose" event sequence (one event followed by another, with intervening events allowable)
	1, 2, 3=4
- allow for strict and "loose" event sequences within a specified time window
	1->200:1500->3=4
	1->200:1500[3]->4
- allow for passing through of all events EXCEPT for a specified list
	1->~2->3=4
- allow detecting ANY event
	1->*->3=4
- allow for specification of multiple events
    [1,2]->3=4
	
Although we don't need to implement this all now, I wanted to come up with a syntax that would be ready for these possible future features.

--------------------------
Here's the event syntax:
(events or time window)((sequence specifier)(events or time window))+ = (new event code)

where
* events are numbers
   the "~" operator can be prepended to an event to specify that it should NOT be found.
   the "*" key can be used to mean any event
   
* event lists are numbers separated by spaces, commas, or both and enclosed in square parenthesis, 
	e.g. [1, 2, 3]
* time windows are min:max in ms (e.g. 200:1000 means 200 to 1000ms)
	- time windows can have an event list appended, meaning any of these events can occur any amount of times during that time window
			e.g.. 200:1000[1, 2, 3]
* sequence specifiers are
    "," meaning "loose" sequence specifier
	"->" meaning "strict" sequence specifier

Note that I could try to make this a bit more like perl-compatible regular expression sytnax; e.g. ^ means not, + means 1 or more, etc

--------------------------

So, to translate the examples given at the beginning,

1->2->3=4
match a strict sequence of event 1, 2, 3; remove them all and add event 4

1, 2, 3=4
match a sequence of 1, 2, and 3 (with any intervening events); remove them (but not any intervening events) all and add event 4

1->200:1500->3=4
match a sequence of 1, followed by 200 to 1500ms (with no events), followed (at any time later) event 3

1->200:1500[3]=4
match a sequence of 1, followed by 200 to 1500ms (in which event 3 is found)

1->[~2]->3=4
match a 1, followed by any code that's not a 2, then a 3

[1,2]->3=4
match either event 1 or 2, followed by a 3

1->200:1500[*]=4 
match event 1, followed by a time window of 200:1500 seconds containing any number of events

1->200:1500[~*]=4 
match event 1, followed by a time window of 200:1500 seconds containing no events (equivalent to 1->200:1500)


--------------------------

For now, I'd recomment implementing:
- the "strict" sequential operator
- events and event lists 
- time windows and event lists within the time window

