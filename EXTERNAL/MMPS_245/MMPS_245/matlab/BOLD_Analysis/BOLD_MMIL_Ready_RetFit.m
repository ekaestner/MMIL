function errcode = BOLD_MMIL_Ready_RetFit(ContainerPath,FSContainerPath,varargin)
%function errcode = BOLD_MMIL_Ready_RetFit(ContainerPath,FSContainerPath,[options])
%
% Purpose: copy retinotopy data and prepare for map fit with rc_retfit
%
% Required Input:
%   ContainerPath: full path of processed MRI Container (with fMRI retinotopy)
%   FSContainerPath: full path of FreeSurfer recon Container
%
% Optional Parameters for Input Data:
%  'multisess_flag': [0|1] indicates source of input analyses
%    0: use results from one or more scans within session
%    1: use results from multiple sessions
%    if 1, pol_dir, ecc_dir, etc. will be ignored
%    {default = 0}
%  'pol_dir': polar angle BOLD analysis subdirectory of ContainerPath
%    if empty, will attempt to find suitable value
%    {default = []}
%  'ecc_dir': eccentricity BOLD analysis subdirectory of ContainerPath
%    if empty, will attempt to find suitable value
%    {default = []}
%  'pol_stem': polar angle file stem
%    if empty, will attempt to find suitable value
%    {default = []}
%  'ecc_stem' eccentricity file stem
%    if empty, will attempt to find suitable value
%    {default = []}
%  'pol_snums': polar angle BOLD scan numbers
%    if empty, will be set to odd scans (for or rev depending on SessInfo.revflag)
%    {default = []}
%  'ecc_snums': eccentricity BOLD scan numbers
%    if empty, will be set to even scans (for or rev depending on SessInfo.revflag)
%    {default = []}
%  'BOLD_infix': string inside BOLD file names (e.g. 'corr_resBOLD')
%    {default = 'corr_resBOLD'}
%
% Optional Parameters for Retinotopy Fitting:
%  'outdir': output directory
%    may be absolute path or relative to ContainerPath
%    {default = 'retfit'}
%  'outstem': output file stem
%    {default = 'retfit'}
%  'roi_name': file stem of region of interest (label) file
%    {default = 'v123'}
%  'r_max': maximum eccentricity (for stimulus presentation)
%    {default = 15}
%  'r_min': minimum eccentricity (for stimulus presentation)
%    {default = []}
%  'r_min_factor': multiplier of r_max to obtain r_min, if empty
%    {default = 0.02}
%  'logtrans_flag': [0|1] whether log transform was used for ecc stimulus
%    {default = 0}
%  'map_v123_flag': [0|1] whether to model V1-V2-V3 complex or
%    a single area mapping entire hemifield
%    {default = 1}
%  'map_poly_flag': [0|1] use polynomial function to deform template
%    {default = 1}
%  'map_poly_order': order of polynomial function (n+1 additional parameters)
%     used to deform template
%    {default = 4}
%  'map_model_type': [0|1|2] model used for initial estimates of u and v
%    0: rectangle
%    1: wedge
%    2: radial wedge
%    {default = 2}
%  'map_area_name': area label if map_v123_flag=0
%    {default = 'v'}
%  'map_rev_polar_flag': [0|1] whether to reverse direction of polar angle
%    {default = 0}
%  'forceflag': [0|1] overwrite existing output
%    {default = 0}
%
% Created:  02/22/11 by Don Hagler
% Last Mod: 12/05/13 by Don Hagler
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if ~mmil_check_nargs(nargin,3), return; end;
parms = mmil_args2parms(varargin, { ...
  'multisess_flag',false,[false true],...
  'pol_dir',[],[],...
  'ecc_dir',[],[],...
  'pol_stem',[],[],...
  'ecc_stem',[],[],...
  'pol_snums',[],[],...
  'ecc_snums',[],[],...
  'BOLD_infix','corr_resBOLD',[],...
  'Fourier_infix','fstats_pval',[],...
  'fnamestem','BOLD',[],...
...
  'outdir','retfit',[],...
  'outstem','retfit',[],...
  'roi_name','v123',[],...
  'r_max',15,[1,100],...
  'r_min',[],[0,100],...
  'r_min_factor',0.02,[0,1],...
  'logtrans_flag',false,[false true],...
  'forceflag',false,[false true],...
... % retinotopy data / tksurfer
  'hemilist',{'lh','rh'},{'lh','rh'},...
  'suffixlist',{'_r','_i'},{'_r','_i'},...
  'outstemlist',{'pol','ecc'},[],...
  'surf','sphere',{'white','pial','inflated','sphere'},...
  'smooth',10,[0,100],...
  'fthresh',0,[],...
  'fmid',1.5,[],...
  'fslope',3,[],...
  'revflag',false,[false true],...
  'sph_rot',{[45 0 90],[45 -20 -90]},[],...
... % retfit parameters
  'roi_dilate_niters',0,[0,1000],...
  'roi_rotation',65,[-180,180],...
  'roi_shift_u',0,[],...
  'roi_shift_v',0,[],...
  'roi_scale_u',0.7,[],...
  'roi_scale_v',0.7,[],...
  'prereg_nruns_quick',2,[],...
  'prereg_niter_quick',100,[],...
  'prereg_step_size_quick',[0.1,0.05,0.01],[],...
  'prereg_nruns',200,[],...
  'prereg_niter',100,[],...
  'map_poly_coef_range',[-5,5],[-100,100],...
  'map_radial_wedge_fact_range',[0.05 0.4],[],...
  'map_radial_offset_range',[1 4],[],...
  'map_scale_u_range',[0.6 0.8],[],...
  'map_scale_v_range',[0.3 0.6],[],...
  'map_rotation_range',[-10 10],[],...
  'map_shift_u_range',[-0.1,0.1],[],...
  'map_shift_v_range',[-0.1,0.1],[],...
  'map_wedge_fact_range',[0.7 1.3],[],...
  'map_r_min_range',[1 1],[],...
  'map_r_max_range',[12 12],[],...
  'map_v1_width_range',[1 1],[],...
  'map_v2_width_range',[0.6 1],[],...
  'map_v3_width_range',[0.5 1],[],...
  'map_v1_length_range',[0.8 1.2],[],...
  'map_v2_length_range',[0.8 1.2],[],...
  'map_v3_length_range',[0.8 1.2],[],...
  'nruns',1,[],...
  'niter',2000,[],...
  'ecc_fact',1,[],...
  'smooth_fact',1,[],...
  'fold_fact',15,[],...
  'vacancy_fact',0,[0,Inf],...
  'max_outbound_penalty',20,[0 10000],...
  'data_smooth_sigma',0.1,[],...
  'map_v123_flag',true,[false true],...
  'map_poly_flag',true,[false true],...
  'map_poly_order',4,[1,10],...
  'map_model_type',2,[0,1,2],...
  'map_logtrans_flag',true,[false true],...
  'map_area_name','v',[],...
  'map_rev_polar_flag',false,[false true],...
  'cost_include_percentile',100,[],...
});

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% parameters to not pass to rc_ready_refit
excl_tags = {'pol_dir' 'ecc_dir' 'pol_stem' 'ecc_stem' 'pol_snums' ...
  'ecc_snums' 'BOLD_infix' 'Fourier_infix' 'fnamestem' 'r_min_factor' ...
  'multisess_flag'};

tags_check_data =  {'multisess_flag','pol_dir','ecc_dir','pol_stem','ecc_stem',...
  'pol_snums','ecc_snums','fnamestem'};

if isempty(parms.r_min)
  parms.r_min = parms.r_min_factor * parms.r_max;
end;

if mmil_isrelative(parms.outdir)
  parms.outdir = [ContainerPath '/' parms.outdir];
end;

% check input directories
indirs = {ContainerPath,FSContainerPath};
for i=1:length(indirs)
  if ~exist(indirs{i},'dir')
    fprintf('%s: ERROR: input dir %s not found\n',mfilename,indirs{i});
    errcode = 1;
    return;
  end;
end;

% get subject name, FS root dir
[parms.subjdir,subj,text] = fileparts(FSContainerPath);
if ~isempty(text), subj = [subj text]; end;

% check that we have BOLD analysis files (polar and eccen)
args = mmil_parms2args(parms,tags_check_data);
[pol_stem,ecc_stem,errcode] = BOLD_MMIL_Check_RetFit_Data(ContainerPath,...
 'infix',parms.BOLD_infix,'fstats_infix',parms.Fourier_infix,...
  args{:});
if errcode
  fprintf('%s: ERROR: polar and eccentricity data not found\n',mfilename);
  return;
end;

%% todo: initial v123 label files from metadata

tags = setdiff(fieldnames(parms),excl_tags);
args = mmil_parms2args(parms,tags);
rc_ready_retfit(subj,pol_stem,ecc_stem,args{:});

