function MEG_MMIL_GroupRCSE_Contrast(ProjID,varargin)
%function MEG_MMIL_GroupRCSE_Contrast(ProjID,[options])
%
% Purpose: perform Group RCSE analysis for contrast response functions
%  runs MEG_MMIL_RCSE_GroupAvg, MEG_MMIL_GroupRCSE, and
%       rc_plot_RCSE_GroupAvg_contrast
%
% Required Input:
%   ProjID: project identifier string (e.g. 'MEG')
%    
% Optional Input:
%  'StudyInfo': struct array containing info for each subject
%    If empty, will use ProjID to get StudyInfo
%    {default = []}
%  'RootDirs': struct containing locations of root data dirs
%    If both RootDirs and StudyInfo are supplied,
%      MMIL_ProjInfo.csv is not required
%    {default = []}
%  'RCSE_prefix': RCSE prefix
%    {default = 'RCSE'}
%  'RCSE_infix': extra string attached to RCSE output prefix
%    {default = []}
%  'RCSE_infix_flag': whether infix was automatically generated
%    ignored if RCSE_infix is not empty
%    {default = 0}
%  'RCSE_fstem_conds': stem of csv file containing condition information
%    {default = 'cond_info'}
%  'diff_prefix': prefix of RCSE results to be subtracted
%    If empty, no subtraction will be performed
%    If supplied, will skip GroupRCSE (do GroupAvg only)
%    {default = []}
%  'diff_infix': infix for RCSE results to be subtracted
%    {default = []}
%  'fit_wforms_flag': [0|1] find peak amplitudes and latencies through
%     nonlinear fitting of multiple components (see rc_fit_wforms)
%     otherwise, find minima/maxima (see mmil_peakdet)
%    {default = 0}
%  'use_components': vector of component numbers 1 to 7
%     to model if fit_wforms_flag = 1
%    {default = [1 2 3]}
%  'avg_flag',: [0|1] calculate group average
%    {default = 1}
%  'forceflag': [0|1] overwrite existing output
%    {default = 0}
%
% Created:  04/27/11 by Don Hagler
% Last Mod: 04/07/14 by Don Hagler
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if ~mmil_check_nargs(nargin,1), return; end;
parms_filter = {...
  'StudyInfo',[],[],...
  'RootDirs',[],[],...
...
  'RCSE_prefix','RCSE',[],...
  'RCSE_infix',[],[],...
  'RCSE_infix_flag',false,[false true],...
  'RCSE_fstem_conds','cond_info_cont',[],...
  'diff_prefix',[],[],...
  'diff_infix',[],[],...
  'fit_wforms_flag',false,[false true],...
  'use_components',[1 2 3],[1,7],...
  'avg_flag',true,[false true],...
  'forceflag',false,[false true],...
...
  'outdir',[],[],...
  'outstem',[],[],...
  'contrast_label','Stimulus Contrast',[],...
  'eps_flag',true,[false true],...
  'hiC_flag',[],[],...
... % for waveform fitting
  'latency_bounds',[],[],...
  'amplitude_bounds',[],[],...
  'rise_tc_bounds',[],[],...
  'fall_tc_bounds',[],[],...
  'search_type',[],[],...
  'polarity',[],[],...
  'latency',[],[],...
  'amplitude',[],[],...
  'rise_tc',[],[],...
  'fall_tc',[],[],...
  'tc_bounds_1',[],[],...
  'latency_bounds_2_3',[],[],...
... % used if fit_wforms_flag=1:
  'rand_init_flag',[],[],...
  'delay_sf',[],[],...
  'niters',[],[],...
  'stepsize',[],[],...
  'linewidth_data',[],[],...
  'linewidth_fit',[],[],...
  'use_areas',[],[],...
  'contrast_latency_flag',[],[],...
  'visible_flag',[],[],...
... % for GroupRCSE
  'inverse_type',[],[],...
  'SNR',[],[],...
  'reweight_flag',[],[],...
  'reweight_init_flag',[],[],...
  'reweight_factor',[],[],...
  'reweight_maxiter',[],[],...
  'reweight_tol',[],[],...
  'reweight_leverage_flag',[],[],...
  'reweight_leverage_max_flag',[],[],...
  'qcflag',[],[],...
  'plotflag',[],[],...
  'plot_text_dx',[],[],...
  'plot_text_dy',[],[],...
... % for GroupRCSE resampling
  'resamp_flag',[],[],...
  'resamp_niters',[],[],...
  'randseed_flag',[],[],...
  'fill_err_flag',[],[],...
  'ci_tail',[],[],...
... for waveform analysis
  'smooth_sigma',[],[],...
  'auc_range',[],[],...
  'auc_nbins',[],[],...
  'auc_baseline_flag',[],[],...
  'auc_baseline_range',[],[],...
  'peak_range',[],[],...
  'peak_pol',[],[],...
  'peak_mindiff',[],[],...
  'normflag',[],[],...
  'powerflag',[],[],...
  'firstflag',[],[],...
  'sfreq',[],[],...
  't0',[],[],...
  't1',[],[],...
  'time',[],[],...
... % for plotting analysis results
  'plot_subj_flag',[],[],...
  'xlim',[],[],...
  'ylim_wform',[],[],...
  'ylim_latency',[],[],...
  'ylim_peak',[],[],...
  'ylim_auc',[],[],...
  'logx_flag',[],[],...
  'condition_values',[],[],...
  'condition_label',[],[],...
  'eps_flag',[],[],...
  'visible_flag',[],[],...
  'linewidth',[],[],...
  'min_linewidth',[],[],...
  'max_linewidth',[],[],...
  'fontname',[],[],...
  'fontsize',[],[],...
  'units_wform',[],[],...
  'logx_flag',[],[],...
  'stderrflag',[],[],...
  'area_names',[],[],...
  'area_colors',[],[],...
  'legend_loc',[],[],...
  'label_flag',[],[],...
... % avg waveform plotting
  'err_samp_dur',[],[],...
  'norm_wform_flag',[],[],...
  'errbar_flag',[],[],...
...
  'required_containers',[],[],...
};

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

[parms,RootDirs] = check_input(ProjID,parms_filter,varargin);

fprintf('%s: performing %s group analysis for ProjID %s...\n',...
  mfilename,parms.outstem,ProjID);

% calculate RCSE group average (and find peaks for each subject)
if parms.avg_flag
  fprintf('%s: calculating RCSE group average...\n',mfilename);
  args = MMIL_Args(parms,'MEG_MMIL_RCSE_GroupAvg');
  MEG_MMIL_RCSE_GroupAvg(ProjID,args{:});
end;

% calculate group-constrained RCSE
if isempty(parms.diff_prefix)
  fprintf('%s: calculating group constrained RCSE...\n',mfilename);
  args = MMIL_Args(parms,'MEG_MMIL_GroupRCSE');
  MEG_MMIL_GroupRCSE(ProjID,args{:});
end;

fprintf('\n\n');

return;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [parms,RootDirs] = check_input(ProjID,parms_filter,options)
  [ProjInfo,RootDirs] = MMIL_Get_ProjInfo(ProjID);
  parms = mmil_args2parms(options,parms_filter);
  if isempty(parms.outstem)
    infix = parms.RCSE_infix;
    if ~isempty(infix), infix = ['_' infix]; end;
    parms.outstem = [parms.RCSE_prefix infix];
  end;
  parms.condition_values = get_contrast_levels(ProjID,parms,RootDirs);
  if parms.hiC_flag
    parms.condition_values = parms.condition_values(end);
  end;
return;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function contrast_levels = get_contrast_levels(ProjID,parms,RootDirs)
  contrast_levels = [];
  fname_conds = [RootDirs.home '/ProjInfo/' ProjID '/'...
    parms.RCSE_fstem_conds '.csv'];
  if ~exist(fname_conds,'file')
    error('missing cond_info file %s',fname_conds);
  end;
  cond_info = rc_read_cond_info(fname_conds);
  if ~isfield(cond_info,'contrast')
    contrast_levels = 1;
  else
    contrast_levels = [cond_info.contrast];
    contrast_levels = unique(contrast_levels(contrast_levels>0));
  end;
return;

