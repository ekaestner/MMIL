function MMIL_Analyze_MEG_Exam(ContainerPath,FSContainerPath,varargin)
%function MMIL_Analyze_MEG_Exam(ContainerPath,FSContainerPath,[options])
%
% Required Input:
%  ContainerPath: full path of directory containing processed MEG data
%  FSContainerPath: full path of directory containing freesurfer recon
%
% Optional Parameters:
%  'dSPMflag': [0|1] run Dynamic Statistical Parametric Mapping
%    {default = 1}
%  'dSROIflag': [0|1] run dSPM ROI analysis
%    {default = 1}
%  'RCSEflag': [0|1] run Retinotopy Constrained Source Estimation
%    {default = 0}
%  'dSRCflag': [0|1] whether to run dSPM-RCSE
%    {default = 0}
%  'SRCflag': [0|1] synthesize sensor data from RCSE
%    {default = 0}
%
% Optional dSPM Parameters (see ts_dSPM for complete list with details):
%  'dSPM_prefix': prefix of dSPM output files
%    {default = 'dSPM'}
%  'dSPM_proc_prefix': prefix of processing output files (must exist already)
%    {default = 'proc'}
%  'dSPM_proc_infix': infix of input processed MEG files
%     e.g. [], 'combcond', 'subnull'
%     {default = []}
%  'dSPM_ico_FSContainerPath': freesurfer recon resampled to ico (e.g. ico4)
%    If supplied, FSContainerPath is ignored for dSPM
%    {default = []}
%  'dSPM_transfile': text file containing 4x4 mri2head transformation
%     either full path or relative to ContainerPath
%     {default = 'mri2head.trans'}
%  'dSPM_badchanfile': name of text file containing bad channel labels
%     full path or relative to ContainerPath
%     {default = 'badchans.txt'}
%  'dSPM_conditions': vector of condition numbers to analyze
%     {default = []} (if empty, use all conditions found in avg_data.averages)
%  'dSPM_ncov_type': type of noise covariance matrix
%     0 = identity matrix, 1 = average prestimulus, 2 = single trials
%     {default = 2}
%  'dSPM_SNR': estimated signal-to-noise-ratio (for regularization parameter)
%     {default = 10}
%  'dSPM_usegrad_flag': [1|0] whether to use gradiometer data, if available
%     {default = 1}
%  'dSPM_usemag_flag': [1|0] whether to use magnetometer data, if available
%     {default = 0}
%  'dSPM_useEEG_flag': [1|0] whether to use EEG data, if available
%     {default = 0}
%  'dSPM_forward_only_flag': [0|1] calculate forward solution and quit
%     {default = 0}
%  'dSPM_forceflag': [0|1|2] whether to overwrite existing output
%     0: do nothing if output exists
%     1: overwrite results and other output
%     2: overwrite all output, including forward solution
%     {default = 0}
%
% Optional dSPM ROI Parameters
%  (see ts_roi_analysis for complete list with details):
%  'dSROI_conditions' - vector or cell array of conditions to analyze
%    If empty, use all stc files found in indir
%    {default: []}
%  'dSROI_outdir': output directory, relative to ContainerPath
%    {default: 'dSROI_analysis'}
%  'dSROI_outstem': output file stem
%    {default: 'dSROI_results'}
%  'dSROI_subjname': name of FreeSurfer subject with label files (ROIs)
%    {default = fsaverage}
%  'dSROI_subjdir': FreeSurfer root directory containing subjname
%    {default = $SUBJECTS_DIR}
%  'dSROI_roidir': directory containing label files
%    full path or relative to subjdir/subjname
%    {default = 'label'}
%  'dSROI_ico': icosahedron order number:
%     If 0, assumes stcfiles are in native subject vertices
%    {default: 4}
%  'dSROI_roinames': cell array of ROI names (FreeSurfer label format)
%      If empty, will search for label files in subjdir/subjname/label
%        with this format: <hemi>.<roiname>.label
%      If none found, will quit with error
%    {default: []}
%  'dSROI_ico_infix_flag':[0|1] if ico>4, expect label files to have
%    this format: <hemi>.<roiname>.ico<ico>.label
%    {default: 0}
%  'dSROI_overlay_roi_flag' [0|1] plot with ROIs overlayed on same plot
%    {default: 0}
%  'dSROI_plot_type': 'jpeg' or 'epsc'  or {'jpeg','epsc'}
%    {default: 'jpeg'}
%  'dSROI_plot_xlim': x axis (time) plot limits (vector of min/max)
%    {default: []}
%  'dSROI_plot_ylim' y axis (amplitude) plot limits (vector of min/max)
%    {default: []}
%  'dSROI_plot_offset': subtract this value from plotted waveforms
%    {default: 1}
%  'dSROI_forceflag': [0|1] overwrite existing output
%    {default: 0}
%
% Optional RCSE Parameters (see rc_RCSE for complete list with details):
%  'RCSE_prefix': prefix of RCSE output files
%    {default = 'RCSE'}
%  'RCSE_proc_prefix': prefix of processing output files (must exist already)
%    {default = 'proc'}
%  'RCSE_proc_infix': infix of input processed MEG files
%     e.g. [], 'combcond', 'subnull'
%     {default = []}
%  'RCSE_infix': additional string attached to output prefix
%     e.g. to indicate values of key parameters
%     {default = []}
%  'RCSE_infix_flag': [0|1] attach automatically generated string
%     indicating values of certain parameters
%     ignored if 'infix' is not empty
%     {default = 0}
%  'RCSE_transfile': text file containing 4x4 mri2head transformation
%     either full path or relative to ContainerPath
%     {default = 'mri2head.trans'}
%  'RCSE_badchanfile': name of text file containing bad channel labels
%     full path or relative to ContainerPath
%     {default = 'badchans.txt'}
%  'RCSE_inverse_type': [0|1|2] type of inverse calculations
%    0: unregularized pseudo-inverse (fast, very little memory)
%    1: regularized psuedo-inverse with identity matrix for noise covariance
%       no source covariance matrix (fast, very little memory)
%    2: regularized psuedo-inverse with noise covariance matrix from data
%       depending on ncov_type, uses source covariance matrix
%    {default = 1}
%  'RCSE_ncov_type': specify what type of noise covariance matrix to use
%     if 0, use identity matrix
%       (assume uniform white noise, independently scaled for each sensor type)
%     if 1, calculate and use noise covariance matrix from average prestim
%     if 2, use noise covariance matrix calculated from single trials
%       (stored in avg_data.noise.covar)
%    {default = 1}
%  'RCSE_SNR': estimated signal-to-noise-ratio (for regularization parameter)
%     {default = 10}
%  'RCSE_usegrad_flag': [1|0] whether to use gradiometer data, if available
%     {default = 1}
%  'RCSE_usemag_flag': [1|0] whether to use magnetometer data, if available
%     {default = 0}
%  'RCSE_useEEG_flag': [1|0] whether to use EEG data, if available
%     {default = 0}
%  'RCSE_retfit_dir' - directory containing retfit results
%    absolute path or relative to ContainerPath
%    {default = 'retfit'}
%  'RCSE_retfit_stem' - file stem for refit results
%    {default = 'retfit'}
%  'RCSE_forward_matfile' - mat file containing gain matrix
%     If does not exist, will calculate
%     {default: []}
%  'RCSE_use_areas' - vector of visual area indices to include in forward model
%    If empty, use all areas specified in retfit results
%    {default = []}
%  'RCSE_r_max' - maximum radius (deg vis. angle) used for eccentricity mapping
%    {default = 12.5}
%  'RCSE_rf_sizes': vector of receptive field sizes for each visual area
%    {default = [0.66,1.03,1.88]}
%  'RCSE_rf_slopes': vector of slopes of linear trend of receptive field sizes
%    {default = [0.06,0.10,0.15]}
%  'RCSE_rf_r_inter': radius value used as intercept at which rf size is rf_sizes
%    {default = 6}
%  'RCSE_SNR': estimated signal-to-noise-ratio (for regularization parameter)
%     {default = 10}
%  'RCSE_plotflag' - [0|1|2|3] whether to plot source waveforms and residual error
%     0=no plots
%     1=save plots at end (do not display)
%     2=display plots during offset and nbrhd fitting (do not save)
%     3=do not run RCSE, only save plots from previous run (do not display)
%     {default = 0}
%  'RCSE_fstem_conds' - stem of csv file containing condition information
%    {default = 'cond_info'}
%  'RCSE_conditions': vector of condition numbers to analyze
%     {default = []} (if empty, use all conditions found in avg_data.averages)
%  'RCSE_hemivec' -  vector of hemifield indices (1=right, 2=left)
%    {default = [1 2]}
%  'RCSE_uplowvec' - vector of upper or lower field indices (1=upper, 2=lower)
%    {default = [1 2]}
%  'RCSE_eccvec' - vector of eccentricity level indices (1=perifoveal, N=peripheral)
%    If empty, use all available
%    {default = []}
%  'RCSE_thetavec' - vector of "theta" (polar angle) indices (1=>0, N=<360)
%    If empty, use all available
%    {default = []}
%  'RCSE_contvec': vector of contrast level indices (e.g. [1,2,3])
%    If empty, use all available contrast levels
%    {default = []}
%  'RCSE_sfvec': vector of spatial frequency level indices (e.g. [1,2,3])
%    If empty, use all available spatial frequency levels
%    {default = []}
%  'RCSE_tfvec': vector of temporal frequency level indices (e.g. [1,2,3])
%    If empty, use all available temporal frequency levels
%    {default = []}
%  'RCSE_colvec': vector of color type indices (e.g.[1,2,3])
%    If empty, use all available color types
%    {default = []}
%  'RCSE_prior_prefix' - prefix of output files from a previous run of RCSE
%     If not full path, assumed to be relative to pwd/matfiles
%     The prior source waveforms will be used as a reference.
%     For offset or nbrhd search, cost function will be correlation with reference
%       between corr_time0 and corr_time1.
%     Note: only applicable if offset_niters>0 or nbrhd_niters>0
%     {default: []}
%  'RCSE_corr_time0' - start of time range (msec) (for prior_prefix)
%     {default: 0}
%  'RCSE_corr_time1' - end of time range (msec) (for prior_prefix)
%     {default: 170}
%  'RCSE_err_prefix' - prefix of output files from a previous run of RCSE
%     If supplied, will fit residual error from previous run
%     {default: []}
%  'RCSE_offset_niters' - number of iterations for random offset search to fit data
%     This tests neighboring vertices, defined by retmap from retfit or w files,
%     to see if they give a better fit to the data
%     If 0, do exhaustive search of offsets
%       specified by all combinations of r_offset and th_offset vectors
%     {default: 0}
%  'RCSE_grid_offset_flag': instead of r and th, make offets to grid
%    coordinates u and v (unit grid)
%    {default = 1}
%  'RCSE_r_step' - standard deviation of gaussian step size for rand offset search
%    {default = 0.0.2}
%  'RCSE_th_step' - standard deviation of gaussian step size for rand offset search
%    {default = 0.02}
%  'RCSE_r_offset_range' - vector of min and max r_offsets for rand offset search
%    If 0, no bounds
%    {default = [-0.2,0.2]}
%  'RCSE_th_offset_range' - vector of min and max th_offsets for rand offset search
%    If 0, no bounds
%    {default = [-0.2,0.2]}
%  'RCSE_forceflag': [0|1|2] whether to overwrite files
%     0: do nothing (except maybe plots) if output exists
%     1: overwrite results and other output
%     2: overwrite all output, including forward solution
%     {default = 0}
%
% Optional dSPM-RCSE Parameters (see rc_dSPM_RCSE for complete list with details):
%  'dSRC_prefix': prefix of dSPM-RCSE output files
%     {default = 'dSPM_RCSE'}
%  'dSRC_dSPM_prefix': prefix of ts_dSPM output files
%     {default = 'dSPM'}
%  'dSRC_RCSE_prefix': prefix of RCSE output files for source waveforms
%     {default = 'RCSE'}
%  'dSRC_RCSE_rootdir': directory containing matfiles dir for RCSE sources
%     If empty, ContainerPath
%     {default = ContainerPath}
%  'dSRC_RCSE_forward_prefix': prefix of RCSE output files for forward solution
%     If empty, RCSE_prefix
%     {default = []}
%  'dSRC_RCSE_forward_rootdir': directory containing matfiles dir for RCSE forward
%     If empty, ContainerPath
%     {default = []}
%  'dSRC_fiterr_flag': [0|1|2|3] which type of sensor data
%    0: run dSPM on RCSE fitted data plus noise
%    1: run dSPM on residual error of RCSE fit
%    2: run dSPM on RCSE fit projected into sensor data
%    3: run dSPM on data minus RCSE fit projected into sensor data
%     {default = 0}
%  'dSRC_areas': when fiterr_flag=0, use only these area numbers
%    if empty, use all areas
%    {default = []}
%  'dSRC_conditions': vector of condition numbers (index to avg_data.averages)
%     defining subset of stimulus locations in retmap to use
%     If empty, use all conditions in retmap.cond_order
%       or conditions in cond_info with non-zero contrast
%     {default = []}
%  'dSRC_sourcefact': amplitude of modeled sources
%     {default = 1}
%  'dSRC_baselineflag': use repeated baseline as noise added to synth_data
%     otherwise use gaussian noise
%     {default = 1}
%  'dSRC_save_synth_flag': [0|1] save synthesized sensor data to mat file
%     {default = 0}
%  'dSRC_fif_flag': [0|1] save synthesized sensor data to fif file
%     {default = 0}
%  'dSRC_template_fif': template fif file (e.g. raw or online avg)
%     Required for saving synthesized data to fif file
%     {default = []}
%  'dSRC_write_mgh_flag': [0|1] save output maps as mgh files
%     {default = 0}
%  'dSRC_ncov_type': type of noise covariance matrix
%     0 = identity matrix, 1 = average prestimulus, 2 = single trials
%     {default = 2}
%  'dSRC_calc_scalefacts_flag': [0|1] calculate scaling factors
%     {default = 0}
%  'dSRC_ROI_outdir': ROI analysis output directory, relative to ContainerPath
%    used if dSRCflag = 1 and dSROIflag = 1
%    {default: 'dSRC_ROI_analysis'}
%  'dSRC_ROI_outstem': ROI analysis output file stem
%    used if dSRCflag = 1 and dSROIflag = 1
%    {default: 'dSRC_ROI_results'}
%  'dSRC_forceflag': [0|1] whether to overwrite existing output
%     {default = 0}
%
% Optional Synth-RCSE Parameters (see MEG_MMIL_Synth_RCSE for detailed list)
%  'SRC_outstem': prefix of output files
%     {default = synth_RCSE}
%  'SRC_prefix': prefix of RCSE files to be used
%    {default = 'RCSE'}
%  'SRC_forward_prefix': prefix of RCSE output files with different forward
%    If empty, use prefix
%    {default = []}
%  'SRC_forward_rootdir': directory containing matfiles dir for different forward
%    If empty, use ContainerPath
%    {default = []}
%  'SRC_fiterr_flag': which type of sensor data
%    0: RCSE fitted data plus noise
%    1: residual error of RCSE fit
%    2: RCSE fit projected into sensor data plus noise
%    3: data minus RCSE fit projected into sensor data
%     {default = 0}
%  'SRC_areas': when fiterr_flag=0, use only these area numbers
%    if empty, use all areas
%    {default = []}
%  'SRC_sourcefact': amplitude of modeled sources
%    {default = 1}
%  'SRC_baselineflag': [0|1] use repeated baseline as noise added to synth_data
%    {default = 0}
%  'SRC_sources': matrix of source time courses
%     if empty, will use RCSE estimated source time courses
%     size must be [ntpoints,narea,ncontrasts]
%     only used if fiterr_flag = 0
%    {default = []}
%  'SRC_fif_flag': [0|1] save synthesized sensor data to fif file
%     {default = 0}
%  'SRC_template_fif': template fif file (e.g. raw or online avg)
%     Required for saving synthesized data to fif file
%     {default = []}
%  'SRC_conditions': vector of condition numbers (index to avg_data.averages)
%     to be saved as fif files
%     {default = []}
%  'SRC_forceflag': [0|1] whether to overwrite existing output
%     {default = 0}
%
% Created:  02/22/11 by Don Hagler
% Last Mod: 08/23/16 by Don Hagler
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% todo: keep?
%  'dSRC_event_codes': vector of event codes to use
%     defining subset of stimulus conditions in cond_info to use
%     If empty, use all conditions in cond_info with non-zero contrast
%     If specified, 'conditions' will be ignored
%     {default = []}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if ~mmil_check_nargs(nargin,2), return; end;
parms = mmil_args2parms(varargin,{...
  'dSPMflag',true,[false true],...
  'dSROIflag',true,[false true],...
  'RCSEflag',false,[false true],...
  'dSRCflag',false,[false true],...
  'SRCflag',false,[false true],...
... % dSPM options
  'dSPM_prefix','dSPM',[],...
  'dSPM_proc_prefix','proc',[],...
  'dSPM_proc_infix',[],[],...
  'dSPM_ico_FSContainerPath',[],[],...
  'dSPM_conditions',[],[],...
  'dSPM_calc_dipinfo_flag',true,[false true],...
  'dSPM_lh_dip_info',[],[],...
  'dSPM_rh_dip_info',[],[],...
  'dSPM_lh_dip_file','bem/lh_white.dip',[],...
  'dSPM_rh_dip_file','bem/rh_white.dip',[],...
  'dSPM_nodec_flag',false,[false true],...
  'dSPM_lh_dec_dips',[],[],...
  'dSPM_rh_dec_dips',[],[],...
  'dSPM_lh_dec_file','bem/lh_white_7.dec',[],...
  'dSPM_rh_dec_file','bem/rh_white_7.dec',[],...
  'dSPM_ncov_type',2,[0 2],...
  'dSPM_ncov_conditions',[],[],...
  'dSPM_calc_scalefacts_flag',false,[false true],...
  'dSPM_baseline_start',-Inf,[-Inf Inf],...
  'dSPM_baseline_end',0,[-Inf Inf],...
  'dSPM_baseline_flag',true,[false true],...
  'dSPM_ssp_projmat',[],[],...
  'dSPM_SNR',10,[eps Inf],...
  'dSPM_noisenorm_flag',true,[false true],...
  'dSPM_noisenorm_identity_flag',true,[false true],...
  'dSPM_depthweight_flag',false,[false true],...
  'dSPM_depthweight_p',0.7,[0,1],...
  'dSPM_bem_flag',true,[false true],...
  'dSPM_openmeeg_flag',false,[false true],...
  'dSPM_radii',[],[],...
  'dSPM_conductivities',[0.3 0.012 0.3],[],...
  'dSPM_EEG_gain_scalefact',1,[-Inf Inf],...
  'dSPM_badchans',[],[],...
  'dSPM_transfile','mri2head.trans',[],...
  'dSPM_badchanfile','badchans.txt',[],...
  'dSPM_usegrad_flag',true,[false true],...
  'dSPM_usemag_flag',false,[false true],...
  'dSPM_useEEG_flag',false,[false true],...
  'dSPM_grad_scalefact',10^13,[-Inf Inf],...
  'dSPM_mag_scalefact',10^15,[-Inf Inf],...
  'dSPM_EEG_scalefact',10^6,[-Inf Inf],...
  'dSPM_write_stc_flag',true,[false true],...
  'dSPM_stc_scalefact',1,[eps Inf],...
  'dSPM_write_mgh_flag',true,[false true],...
  'dSPM_sparsesmooth',0,[0 1000],...
  'dSPM_postsmooth',0,[0 1000],...
  'dSPM_mbmask_flag',false,[false,true],...
  'dSPM_resamp2ico_flag',false,[false true],...
  'dSPM_icolevel',7,[1 7],...
  'dSPM_icosmooth',3,[0 1000],...
  'dSPM_write_fif_flag',false,[false true],...
  'dSPM_template_fif',[],[],...
  'dSPM_nlayers',3,[1:4],...
  'dSPM_bem_surf_files',...
    {'bem/inner_skull.tri','bem/outer_skull.tri','bem/outer_scalp.tri'},[],...
  'dSPM_cen_sph',[],[],...
  'dSPM_trans',[],[],...
  'dSPM_alignment_fif',[],[],...
  'dSPM_lh_sourcecov_file',[],[],...
  'dSPM_rh_sourcecov_file',[],[],...
  'dSPM_sourcecov_thresh',0,[-Inf Inf],...
  'dSPM_sourcecov_thresh_abs_flag',true,[false true],...
  'dSPM_sourcecov_maxvar',0.9,[0 1],...
  'dSPM_sourcecov_minvar',0.09,[0 1],...
  'dSPM_forward_matfile',[],[],...
  'dSPM_inverse_matfile',[],[],...
  'dSPM_refEEG_coords',[],[],...
  'dSPM_prewhiten_flag',false,[false true],...
  'dSPM_orient_constr_flag',false,[false true],...
  'dSPM_orient_tang',0,[0 1],...
  'dSPM_smooth_constr_flag',false,[false true],...
  'dSPM_smooth_constr_nsmooth',10,[1,100],...
  'dSPM_signed_sources_flag',true,[false true],...
  'dSPM_datatype','single',{'single','double'},...
  'dSPM_save_results_flag',true,[false true],...
  'dSPM_save_avg_flag',false,[false true],...
  'dSPM_save_fiterr_flag',false,[false true],...
  'dSPM_forward_only_flag',false,[false true],...
  'dSPM_forceflag',0,[0:2],...
... % dSPM ROI options
  'dSROI_indir','stcfiles',[],...
  'dSROI_prefix','dSPM',[],...
  'dSROI_conditions',[],[],...
  'dSROI_outdir','dSROI_analysis',[],...
  'dSROI_outstem','dSROI_results',[],...
  'dSROI_roidir','label',[],...
  'dSROI_subjname','fsaverage',[],...
  'dSROI_subjdir',[],[],...
  'dSROI_ico',4,[0:7],...
  'dSROI_roinames',[],[],...
  'dSROI_ico_infix_flag',false,[false true],...
  'dSROI_overlay_roi_flag',false,[false true],...
  'dSROI_hemilist',{'lh','rh'},{'lh','rh'},...
  'dSROI_plotflag',true,[false true],...
  'dSROI_condnames',[],[],...
  'dSROI_prenames',[],[],...
  'dSROI_plot_type','jpeg',{'jpeg','epsc'},...
  'dSROI_plot_xlim',[],[],...
  'dSROI_plot_ylim',[],[],...
  'dSROI_plot_offset',1,[-Inf,Inf],...
  'dSROI_visible_flag',false,[false true],...
  'dSROI_linewidth',1.5,[],...
  'dSROI_fontname','Arial',[],...
  'dSROI_fontsize',12,[],...
  'dSROI_label_flag',true,[false true],...
  'dSROI_units','sqrt(F)-1',[],...
  'dSROI_roi_colors',{'b','c','g','y','r','m','k'},[],...
  'dSROI_roi_linewidths',[],[],...
  'dSROI_legend_flag',true,[false true],...
  'dSROI_legend_loc','NorthEastOutside',[],...
  'dSROI_avg_hemis_flag',false,[false true],...
  'dSROI_forceflag',false,[false true],...
... % RCSE options
  'RCSE_prefix','RCSE',[],...
  'RCSE_proc_prefix','proc',[],...
  'RCSE_proc_infix',[],[],...
  'RCSE_infix',[],[],...
  'RCSE_infix_flag',false,[false true],...
  'RCSE_transfile','mri2head.trans',[],...
  'RCSE_badchanfile','badchans.txt',[],...
  'RCSE_forceflag',0,[0:2],...
  'RCSE_plotflag',0,[0 1 2 3],...
  'RCSE_forward_matfile',[],[],...
  'RCSE_indy_locs_flag',false,[false true],...
  'RCSE_graymid_flag',false,[false true],...
  'RCSE_calc_dipinfo_flag',true,[false true],...
  'RCSE_inverse_type',1,[0:2],...
  'RCSE_ncov_type',1,[0,1,2],...
  'RCSE_SNR',10,[eps Inf],...
  'RCSE_fstem_conds','cond_info',[],...
  'RCSE_cond_offsets_flag',0,[0 1 2],...
  'RCSE_conditions',[],[],...
  'RCSE_hemivec',[1,2],[1,1,2],...
  'RCSE_uplowvec',[1,2],[1,1,2],...
  'RCSE_eccvec',[],[],...
  'RCSE_thetavec',[],[],...
  'RCSE_contvec',[],[],...
  'RCSE_sfvec',[],[],...
  'RCSE_tfvec',[],[],...
  'RCSE_colvec',[],[],...
  'RCSE_retfit_dir','retfit',[],...
  'RCSE_retfit_stem','retfit',[],...
  'RCSE_vf2ctx_flag',true,[false true],...
  'RCSE_stim_type',2,[0:2],...
  'RCSE_use_areas',[],[],...
  'RCSE_r_offset',0,[-100,100],...
  'RCSE_th_offset',0,[-180,180],...
  'RCSE_r_max',12.5,[0,Inf],...
  'RCSE_ecc_width',1,[0,100],...
  'RCSE_theta_width',10,[0,360],...
  'RCSE_w_thresh',0.01,[0,100],...
  'RCSE_vfnorm_flag',true,[false true],...
  'RCSE_w_thresh_patch',0,[0,1],...
  'RCSE_single_vertex_flag',0,[0 1 2],...
  'RCSE_rf_sizes',[0.66,1.03,1.88],[0.01,10],...
  'RCSE_rf_slopes',[0.06,0.10,0.15],[0,10],...
  'RCSE_rf_r_inter',6,[0,Inf],...
  'RCSE_restrict_hemi_flag',false,[false true],...
  'RCSE_restrict_uplow_flag',false,[false true],...
  'RCSE_restrict_flag',false,[false true],...
  'RCSE_retfit_data_flag',false,[false true],...
  'RCSE_polarity_penalty',0,[-Inf,Inf],...
  'RCSE_fit_range_flag',false,[false true],...
  'RCSE_fit_time0',80,[-Inf,Inf],...
  'RCSE_fit_time1',120,[-Inf,Inf],...
  'RCSE_fmincon_flag',false,[false true],...
  'RCSE_offset_niters',0,[0,Inf],...
  'RCSE_max_offset_niters',Inf,[0,Inf],...
  'RCSE_offset_mstarts',0,[0,Inf],...
  'RCSE_mstart_rotsearch_flag',false,[false true],...
  'RCSE_mstart_rfsearch_flag',false,[false true],...
  'RCSE_mstart_randstart_flag',true,[false true],...
  'RCSE_mstart_average_flag',true,[false true],...
  'RCSE_reweight_flag',true,[false true],...
  'RCSE_reweight_factor',2,[],...
  'RCSE_reweight_maxiter',100,[],...
  'RCSE_reweight_tol',1e-7,[],...
  'RCSE_reweight_leverage_flag',true,[false true],...
  'RCSE_reweight_leverage_max_flag',true,[false true],...
  'RCSE_hybrid_flag',false,[false true],...
  'RCSE_hybrid_pre_niters',0,[0,Inf],...
  'RCSE_offset_niters_last',0,[0,Inf],...
  'RCSE_offset_group_flag',1,[0 1 2 3 4],...
  'RCSE_offset_group_patches_flag',false,[false true],...
  'RCSE_offset_group_areas_flag',false,[false true],...
  'RCSE_offset_const_areas',[],[],...
  'RCSE_r_step',0.02,[1e-4,10],...
  'RCSE_th_step',0.02,[1e-4,90],...
  'RCSE_r_offset_range',[-0.2,0.2],[-100,100],...
  'RCSE_th_offset_range',[-0.2,0.2],[-180,180],...
  'RCSE_grid_offset_flag',true,[false true],...
  'RCSE_grid_offset_smooth',0,[0,1000],...
  'RCSE_rot_niters',0,[0,Inf],...
  'RCSE_rot_step',1,[0,180],...
  'RCSE_rot_max',10,[0,180],...
  'RCSE_best_rot',[0 0 0],[-180 180],...
  'RCSE_rscale_niters',0,[0,Inf],...
  'RCSE_rscale_step',0.01,[0,1],...
  'RCSE_rscale_range',[0.8,1.2],[0.1,10],...
  'RCSE_best_rscale',1,[0.1,10],...
  'RCSE_nbrhd_niters',0,[0,Inf],...
  'RCSE_nbrhd_full_flag',false,[false true],...
  'RCSE_prior_prefix',[],[],...
  'RCSE_prior_weight',0.5,[0,1],...
  'RCSE_prior_avg_flag',0,[0:3],...
  'RCSE_prior_mindiff_flag',0,[0 1 2],...
  'RCSE_prior_zscore_flag',false,[false true],...
  'RCSE_prior_sem_min',0.5,[eps,100],...
  'RCSE_prior_indy_wform_flag',false,[false true],...
  'RCSE_corr_time0',0,[-Inf,Inf],...
  'RCSE_corr_time1',170,[-Inf,Inf],...
  'RCSE_best_retmap_prefix',[],[],...
  'RCSE_err_prefix',[],[],...
  'RCSE_rf_niters',0,[0,Inf],...
  'RCSE_rf_min_sizes',[0.1,0.1,0.1],[0.01,10],...
  'RCSE_rf_max_sizes',[3,3,3],[0.01,10],...
  'RCSE_rf_min_slopes',[0,0,0],[0,10],...
  'RCSE_rf_max_slopes',[0.2,0.2,0.2],[0,10],...
  'RCSE_rf_size_step',0.1,[0.01,10],...
  'RCSE_rf_slope_step',0.01,[0.001,1],...
  'RCSE_calc_scalefacts_flag',false,[false true],...
  'RCSE_bem_flag',true,[false true],...
  'RCSE_openmeeg_flag',false,[false true],...
  'RCSE_conductivities',[0.3 0.012 0.3],[],...
  'RCSE_EEG_gain_scalefact',1,[-Inf Inf],...
  'RCSE_nlayers',3,[1:4],...
  'RCSE_bem_surf_files',...
    {'bem/inner_skull.tri','bem/outer_skull.tri','bem/outer_scalp.tri'},[],...
  'RCSE_grad_scalefact',10^13,[-Inf Inf],...
  'RCSE_mag_scalefact',10^15,[-Inf Inf],...
  'RCSE_EEG_scalefact',10^6,[-Inf Inf],...
  'RCSE_usegrad_flag',true,[false true],...
  'RCSE_usemag_flag',false,[false true],...
  'RCSE_useEEG_flag',false,[false true],...
  'RCSE_indy_smfact',0.999,[0,1],...
  'RCSE_ecc_smfact',0,[0,1],...
  'RCSE_upperlower_smfact',0,[0,1],...
  'RCSE_hemi_smfact',0,[0,1],...
  'RCSE_loose_flag',false,[false true],...
  'RCSE_loose_tang_weight',0.5,[0,1],...
  'RCSE_condF_thresh',0,[],...
  'RCSE_dip_matfile',[],[],...
  'RCSE_ret_dips_lh_dec_file',[],[],...
  'RCSE_ret_dips_rh_dec_file',[],[],...
  'RCSE_ret_dip_qfield_flag',true,[false true],...
  'RCSE_nonret_dips_lh_dec_file',[],[],...
  'RCSE_nonret_dips_rh_dec_file',[],[],...
  'RCSE_ret_dips_weight',0,[0,1],...
  'RCSE_nonret_dips_weight',0,[0,1],...
  'RCSE_norm_weights_flag',2,[0 1 2 3],...
  'RCSE_area_names',{'v1','v2','v3'},[],...
  'RCSE_area_colors',{'b','g','r'},[],...
  'RCSE_plot_outdir','RCSE_plots',[],...
  'RCSE_plot_normflag',false,[false true],...
  'RCSE_plot_ylim',[-30,30],[-Inf,Inf],...
  'RCSE_save_avg_flag',true,[false true],...
  'RCSE_write_err_flag',false,[false true],...
  'RCSE_write_fit_flag',false,[false true],...
  'RCSE_write_areafit_flag',false,[false true],...
  'RCSE_write_fif_flag',false,[false true],...
  'RCSE_template_fif',[],[],...
... % dSPM-RCSE options
  'dSRC_rootoutdir',ContainerPath,[],...
  'dSRC_prefix','dSPM_RCSE',[],...
  'dSRC_outstem','dSPM_RCSE',[],...
  'dSRC_dSPM_prefix','dSPM',[],...
  'dSRC_RCSE_prefix','RCSE',[],...
  'dSRC_RCSE_rootdir',[],[],...
  'dSRC_RCSE_forward_prefix',[],[],...
  'dSRC_RCSE_forward_rootdir',[],[],...
  'dSRC_fiterr_flag',0,[0:3],...
  'dSRC_areas',[],[],...
  'dSRC_conditions',[],[],...
  'dSRC_sourcefact',1,[0,Inf],...
  'dSRC_baselineflag',true,[false true],...
  'dSRC_save_synth_flag',false,[false true],...
  'dSRC_fif_flag',false,[false true],...
  'dSRC_template_fif',[],[],...
  'dSRC_write_mgh_flag',false,[false true],...
  'dSRC_ncov_type',2,[0:2],...
  'dSRC_calc_scalefacts_flag',false,[false true],...
  'dSRC_ROI_outdir','dSRC_ROI_analysis',[],...
  'dSRC_ROI_outstem','dSRC_ROI_results',[],...
  'dSRC_forceflag',0,{0,1},...
...% synth-RCSE options
  'SRC_rootoutdir',[],[],...
  'SRC_outstem','synth_RCSE',[],...
  'SRC_prefix','RCSE',[],...
  'SRC_forward_prefix',[],[],...
  'SRC_rootdir',[],[],...
  'SRC_forward_rootdir',[],[],...
  'SRC_fiterr_flag',0,[0:3],...
  'SRC_areas',[],[],...
  'SRC_sourcefact',1,[-Inf,Inf],...
  'SRC_baselineflag',false,[false true],...
  'SRC_sources',[],[],...
  'SRC_fif_flag',false,[false true],...
  'SRC_template_fif',[],[],...
  'SRC_conditions',[],[],...
  'SRC_forceflag',false,[false true],...
});

% run dSPM
if parms.dSPMflag
  args = MMIL_Args(parms,'MEG_MMIL_dSPM');
  MEG_MMIL_dSPM(ContainerPath,FSContainerPath,args{:});
end;

% run dSPM ROI analysis
if parms.dSROIflag
  args = MMIL_Args(parms,'MEG_MMIL_dSROI');
  MEG_MMIL_dSROI(ContainerPath,args{:});
end;

% run RCSE
if parms.RCSEflag
  args = MMIL_Args(parms,'MEG_MMIL_RCSE');
  MEG_MMIL_RCSE(ContainerPath,FSContainerPath,args{:});
end;

% run dSPM-RCSE
if parms.dSRCflag
  args = MMIL_Args(parms,'MEG_MMIL_dSPM_RCSE');
  MEG_MMIL_dSPM_RCSE(ContainerPath,args{:})
  % rerun dSPM ROI analysis
  if parms.dSROIflag
    parms.dSROI_prefix = parms.dSRC_prefix;
    parms.dSROI_outdir = parms.dSRC_ROI_outdir;
    parms.dSROI_outstem = parms.dSRC_ROI_outstem;
    args = MMIL_Args(parms,'MEG_MMIL_dSROI');
    MEG_MMIL_dSROI(ContainerPath,args{:});
  end;
end;

% run synth-RCSE
if parms.SRCflag
  args = MMIL_Args(parms,'MEG_MMIL_Synth_RCSE');
  MEG_MMIL_Synth_RCSE(ContainerPath,args{:})
end;

