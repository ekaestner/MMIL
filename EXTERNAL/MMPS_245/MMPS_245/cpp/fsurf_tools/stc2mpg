#!/bin/csh -f
# stc2mpg -- make movie from MNE stc (source time course) file

set progname = stc2mpg

## initialize variables ##
set stcfile = unset
set subj = unset
set hemi = rh
set rmintermedflag = 0
set surf = inflated
set patch = full
set fthresh = 0
set fslope = 1
set fmid = 1
set sparsesmooth = 20
set postsmooth = 5
set scale = 1.0
set view = lat
set rotx = 0
set roty = 0
set rotz = 0
set flatflag = 0
set scalebarflag = 0
set colscalebarflag = 0
set offset = 0.2
set cvfact = 1.5
set outdir = `pwd`
set indir = `pwd`
set tfirst = 0
set tlast = 99
set tmax = 999
set ndigits = 3
set polarflag = 0
set complexflag = 0

if($#argv < 4) then
  goto usage_exit;
  exit 1;
endif

## parse and check params ##
goto parse_args;
parse_args_return:

goto check_params;
check_params_return:

###############################################################################

# check for existence of subject and stcfile
if (! $?SUBJECTS_DIR) then
  echo "$progname : ### SUBJECTS_DIR not set... quitting"
  exit
endif

if (! -e $SUBJECTS_DIR/$subj) then
  echo "$progname : ### $SUBJECTS_DIR/$subj not found... quitting"
  exit
endif

if ($complexflag) then
  if (! -e $indir/$stcfile'_r'-$hemi.stc || \
      ! -e $indir/$stcfile'_i'-$hemi.stc) then
    echo "$progname : ### $indir/$stcfile'_r'-$hemi.stc not found... quitting"
    exit
  endif
else
  if (! -e $indir/$stcfile-$hemi.stc) then
    echo "$progname : ### $indir/$stcfile-$hemi.stc not found... quitting"
    exit
  endif
endif

# convert stc to wt (if not done already)
if ($complexflag) then
  if (! -e $outdir/$stcfile'_r'-$hemi.wt || \
      ! -e $outdir/$stcfile'_i'-$hemi.wt) then
    echo "$progname : converting stc2wt..."
    stc2wt -instem $stcfile'_r' -hemi $hemi -subj $subj \
           -indir $indir -outdir $outdir
    stc2wt -instem $stcfile'_i' -hemi $hemi -subj $subj \
           -indir $indir -outdir $outdir
  else
    echo "$progname : skipping stc2wt (wt files already exists)"
  endif
else
  if (! -e $outdir/$stcfile-$hemi.wt) then
    echo "$progname : converting stc2wt..."
    stc2wt -instem $stcfile -hemi $hemi -subj $subj \
           -indir $indir -outdir $outdir
  else
    echo "$progname : skipping stc2wt (wt file already exists)"
  endif
endif

# convert wt to w (if not done already)
set wt2wflag = 0
set n = $tfirst
while ($n <= $tlast)
  set npad = `count -dig $ndigits $n $n`
## todo: do this check for each time point below, not all at once here
  if ($complexflag) then
    if (! -e $outdir/$stcfile-tpoint$npad'-sp'$sparsesmooth'sm'$postsmooth'_r'-$hemi.w || \
        ! -e $outdir/$stcfile-tpoint$npad'-sp'$sparsesmooth'sm'$postsmooth'_i'-$hemi.w) then
      set wt2wflag = 1
    endif
  else
    if (! -e $outdir/$stcfile-tpoint$npad'-sp'$sparsesmooth'sm'$postsmooth-$hemi.w) then
      set wt2wflag = 1
    endif
  endif
  @ n++
end
if ($wt2wflag) then
  echo "$progname : converting wt2w..."
  if ($complexflag) then
    wt2w -instem $stcfile -hemi $hemi -subj $subj -tfirst $tfirst -tlast $tlast \
         -outdir $outdir -indir $outdir -infix _r
    wt2w -instem $stcfile -hemi $hemi -subj $subj -tfirst $tfirst -tlast $tlast \
         -outdir $outdir -indir $outdir -infix _i
  else
    wt2w -instem $stcfile -hemi $hemi -subj $subj -tfirst $tfirst -tlast $tlast \
         -outdir $outdir -indir $outdir
  endif

  echo "$progname : sparse smoothing..."
  echo "$progname : tfirst=$tfirst, tlast=$tlast"
  if ($complexflag) then
    set infixlist = (_r _i)
  else
    set infixlist = ("none")
  endif
  set n = $tfirst
  while ($n <= $tlast)
    echo "$progname : sparse smoothing, n=$n..."
    set npad = `count -dig $ndigits $n $n`
    foreach infix ($infixlist)
      if ($#infixlist == 1) then
        set instem = $stcfile-tpoint$npad
        set outstem = $instem'-sp'$sparsesmooth'sm'$postsmooth
      else
        set instem = $stcfile-tpoint$npad$infix
        set outstem = $instem'-sp'$sparsesmooth'sm'$postsmooth$infix
      endif
      smoothsurfvals \
        -instem $instem -subj $subj \
        -outstem $outstem \
        -indir $outdir -outdir $outdir \
        -sparse_pre_niter $sparsesmooth \
        -niter $postsmooth \
        -hemi $hemi
    end
    @ n++
    echo "$progname : done with this timepoint."
  end
else
  echo "$progname : skipping wt2w (w files already exist)"
endif

if($flatflag) then
  set viewstring = "$patch.patch.flat"
else
  set viewstring = "$surf-$view"
endif


# render w to rgb (if not done already)
set renderflag = 0
set n = $tfirst
while ($n <= $tlast)
  set npad = `count -dig $ndigits $n $n`
  if (! -e $outdir/rgb/$stcfile-tpoint$npad'-sp'$sparsesmooth'sm'$postsmooth-$hemi-$viewstring.rgb) then
    set renderflag = 1
  endif
  @ n++
end
if ($renderflag) then
  mkdir -p $outdir/rgb
  echo "$progname : rendering..."

  if ($flatflag) then
    set flatarg = "-flat -patch $patch"
  else
    set flatarg = ""
  endif
  if ($scalebarflag) then
    set scalebararg = "-scalebar"
  else
    set scalebararg = ""
  endif
  if ($colscalebarflag) then
    set colscalebararg = "-colscalebar"
  else
    set colscalebararg = ""
  endif
  if ($polarflag) then
    set polararg = "-polar"
  else
    set polararg = ""
  endif
  set extraargs = "$flatarg $scalebararg $colscalebararg $polararg"
  cp $outdir/$stcfile-tpoint*'-sp'$sparsesmooth'sm'$postsmooth-$hemi.w \
     $outdir/rgb
  rendall $subj -hemi $hemi -offscreen \
          -fthresh $fthresh -fmid $fmid -fslope $fslope \
          -smooth 0 -view $view -scale $scale \
          -rotx $rotx -roty $roty -rotz $rotz \
          -offset $offset -cvfact $cvfact $extraargs \
          -outdir $outdir/rgb -indir $outdir/rgb
  rm $outdir/rgb/*.w
  rm tempsurf.tcl.*
  rm surfer.log
else
  echo "$progname : skipping render (rgb files already exist)"
endif

# make mpg
echo "$progname : converting rgb's to mpg..."
set rgblist = ()
set n = $tfirst
while ($n <= $tlast)
  # count is a simple afni program
  set npad = `count -dig $ndigits $n $n`
  set rgblist = ($rgblist $outdir/rgb/$stcfile-tpoint$npad'-sp'$sparsesmooth'sm'$postsmooth-$hemi-$viewstring.rgb)
  @ n++
end
convert -adjoin $rgblist \
                $outdir/$stcfile-$hemi-$viewstring.mpg

# remove intermediates
if ($rmintermedflag) then
  echo "$progname : removing intermediate files"
  rm $outdir/$stcfile-$hemi.wt
  rm $outdir/$stcfile-tpoint*-$hemi.w
  rm $outdir/rgb/$stcfile-tpoint*-$hemi-$viewstring.rgb
endif

exit 0;
###############################################

############--------------##################
parse_args:
set cmdline = ($argv);

while( $#argv != 0 )

  set flag = $argv[1]; shift;
  
  switch($flag)

    case "-subj"
      if ( $#argv == 0) goto arg1err;
      set subj = $argv[1]; shift;
      breaksw

    case "-stcfile"
      if ( $#argv == 0) goto arg1err;
      set stcfile = $argv[1]; shift;
      breaksw

    case "-polar"
      set polarflag = 1;
      set complexflag = 1;
      breaksw

    case "-hemi"
      if ( $#argv == 0) goto arg1err;
      set hemi = $argv[1]; shift;
      breaksw

    case "-tfirst"
      if ( $#argv == 0) goto arg1err;
      set tfirst = $argv[1]; shift;
      breaksw

    case "-tlast"
      if ( $#argv == 0) goto arg1err;
      set tlast = $argv[1]; shift;
      breaksw

    case "-tmax"
      if ( $#argv == 0) goto arg1err;
      set tmax = $argv[1]; shift;
      breaksw

    case "-rmintermed"
      set rmintermedflag = 1;
      breaksw

    case "-surf":
      if ( $#argv == 0) goto arg1err;
      set surf = $argv[1]; shift;
      breaksw

    case "-fthresh"
      if ( $#argv == 0) goto arg1err;
      set fthresh = $argv[1]; shift;
      breaksw

    case "-fslope"
      if ( $#argv == 0) goto arg1err;
      set fslope = $argv[1]; shift;
      breaksw

    case "-fmid"
      if ( $#argv == 0) goto arg1err;
      set fmid = $argv[1]; shift;
      breaksw

    case "-postsmooth"
      if ( $#argv == 0) goto arg1err;
      set postsmooth = $argv[1]; shift;
      breaksw

    case "-sparsesmooth"
      if ( $#argv == 0) goto arg1err;
      set sparsesmooth = $argv[1]; shift;
      breaksw

    case "-offset"
      if ( $#argv == 0) goto arg1err;
      set offset = $argv[1]; shift;
      breaksw

    case "-cvfact"
      if ( $#argv == 0) goto arg1err;
      set cvfact = $argv[1]; shift;
      breaksw

    case "-scale"
      if ( $#argv == 0) goto arg1err;
      set scale = $argv[1]; shift;
      breaksw

    case "-view"
      if ( $#argv == 0) goto arg1err;
      set view = $argv[1]; shift;
      breaksw

    case "-rotx"
      if ( $#argv == 0) goto arg1err;
      set rotx = $argv[1]; shift;
      breaksw

    case "-roty"
      if ( $#argv == 0) goto arg1err;
      set roty = $argv[1]; shift;
      breaksw

    case "-rotz"
      if ( $#argv == 0) goto arg1err;
      set rotz = $argv[1]; shift;
      breaksw

    case "-flat"
      set flatflag = 1;
      breaksw

    case "-patch"
      if ( $#argv == 0) goto arg1err;
      set patch = $argv[1]; shift;
      breaksw

    case "-scalebar"
      set scalebarflag = 1
      breaksw

    case "-colscalebar"
      set colscalebarflag = 1
      breaksw

    case "-outdir"
      if ( $#argv == 0) goto arg1err;
      set outdir = $argv[1]; shift;
      breaksw

    case "-indir"
      if ( $#argv == 0) goto arg1err;
      set indir = $argv[1]; shift;
      breaksw

    default:
      echo ERROR: Flag $flag unrecognized. 
      echo $cmdline
      exit 1
      breaksw
  endsw

end

goto parse_args_return;
############--------------##################

############--------------##################
check_params:

  if ("$hemi" != "rh" && "$hemi" != "lh") then
    echo "ERROR: hemi must be rh or lh"
    exit 1;
  endif

  if ($subj == "unset") then
    echo "ERROR: subject name not set!"
    goto usage_exit;
  endif

  if ($stcfile == "unset") then
    echo "ERROR: stcfilestem not set!"
    goto usage_exit;
  endif

  if ($view != lat && \
      $view != ven && \
      $view != med && \
      $view != pos && \
      $view != dor && \
      $view != cus) then
    echo "ERROR: view must be lat, ven, med, pos, or dor"
    exit 1;
  endif

  if ($tmax > 9999) then
    set ndigits = 5
  else if ($tmax > 999) then
    set ndigits = 4
  else if ($tmax > 99) then
    set ndigits = 3
  else if ($tmax > 9) then
    set ndigits = 2
  else
    set ndigits = 1
  endif
  if ($tlast > $tmax) then
    $tlast = $tmax
  endif

goto check_params_return;
############--------------##################

############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################

############--------------##################
usage_exit:
  echo " "
  echo "USAGE: stc2mpg -subj <name> -stcfile <stcfilestem> [options]"
  echo " "
  echo "Required Arguments:";
  echo "  -subj        subject name  : SUBJECTS_DIR must be set correctly"
  echo "  -stcfile     stcfilestem   : file name, excluding hemi and .stc extension"
  echo " "
  echo "Optional Arguments:";
  echo "  -hemi         hemisphere           : [$hemi]"
  echo "  -polar        look for _r and _i stc files, render polar"
  echo "  -rmintermed   remove intermediate files (wt, w, rgb)"
  echo "  -tfirst       first time point     : [$tfirst]"
  echo "  -tlast        last time point      : [$tlast]"
  echo "  -tmax         max time point       : [$tmax]"
  echo "  -indir        input dir            : [$indir]"
  echo "  -outdir       output dir           : [$outdir]"
  echo "Optional Rendering Arguments:";
  echo "  -surf         surface              : [$surf]"
  echo "  -fthresh      fthresh              : [$fthresh]"
  echo "  -fslope       fslope               : [$fslope]"
  echo "  -fmid         fmid                 : [$fmid]"
  echo "  -sparsesmooth sparse smooth iters  : [$sparsesmooth]"
  echo "  -postsmooth   regular smooth iters : [$postsmooth]"
  echo "  -offset       offset               : [$offset]"
  echo "  -cvfact       cvfact               : [$cvfact]"
  echo "  -scale        zoom factor          : [$scale]"
  echo "  -view         lat,med,ven,pos,dor  : [$view]"
  echo "  -rotx         x rotation           : [$rotx]"
  echo "  -roty         y rotation           : [$roty]"
  echo "  -rotz         z rotation           : [$rotz]"
  echo "  -flat         use flat patch"
  echo "  -patch        patch                : [$patch]"
  echo "  -scalebar"
  echo "  -colscalebar"
  echo " "
exit 1;
