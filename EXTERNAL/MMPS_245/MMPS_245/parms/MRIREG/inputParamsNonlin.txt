//////////////////////////////////////////////////////////////////////
// 
// Input parameters file for "mri_register". The only
// requirements in writing a file like this are that a variable name
// should be the first string in a line (the name may be preceded by
// white space), followed by another string (doesn't matter what,
// e.g., "="), followed by the value, and optionally followed by
// another string or strings -- useful for documentation. Only one
// parameter per line. Non-parameter lines will either be comment
// lines (whose first non white-space characters must be "//") white
// space lines, or empty lines. If a "//" immediately follows the 
// whitesapce after the "=", that is a comment marker, and the
// variable is default-initialized, or initialized from the command
// line.
// 
//////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
/// Specify input files, output directory, and operations to be performed ///

symmetric           = 0    // 0|1 switch to specify asymmetric or symmetric problem, i.e., SQR[Ir+dx)-A(r)]  or  SQR[Ir+dr)-A(r-dr)].
reverseSourceTarget = 1    // 0|1 switch to map original target to original subject after having mapped subject to target
regS2T              = 1    // 0|1 To reg T2S only, set reverseSourceTarget = 1 and regS2T = 0
resultsInSpace2     = 0    // 0|1 switch to specify writing results in space of time point 1 or time point 2, i.e., that of original subject or original target
standardizeIntensities = 0 // If affine reg to baseline has already standardized the later time points to orig.mgz, then set to 0.
registerROI         = 0
roi                 = [ -1 ] // array of ROIs to focuse on as a unit.
roiBlowupDimNvox    = 180

standardIntensityCDFMaskedFile      = standardIntensityCDF_MASKED_255.txt
standardIntensityCDFNotMaskedFile   = standardIntensityCDF_NO_MASK_255.txt

rigidReg                            = 0 (1|0) Note, voxStepRigidRegMultScale used here
rigidRegFinesse                     = 0 (1|0) Note, voxStepAffineReg used here
affineReg                           = 0 (1|0) Note, voxStepAffineReg used here
explicitAffRegTP2toTP1              = 0 (1|0)
nonlinearReg                        = 1 (1|0) Note, voxStepNonlinReg used here
principalComponentAnalysis          = 0 (1|0) Note, voxStepPCA used here

averageAffRegdImageInTP1            = 0
differenceAffRegdImageInTP1         = 1

resampledImageSuffix                = _mappedToTarget.mgh

//////////////////////
/// Rescale Images ///

rescaleToTarget             = 0        (0|1: 1 ==> rescale width, height, depth, voxel x-, y-, and z-size of all other images to those of target)
rescaleWidth                = 256      (if rescaleToTarget==0, then rescale ALL images to these values)
rescaleHeight               = 256
rescaleDepth                = 256
rescaleXsize                = 1.0      (mm)
rescaleYsize                = 1.0
rescaleZsize                = 1.0


///////////////////////////////
/// Common numerical values ///

maskThreshold               = 0.1      (valid target voxels have a mask probability greater or equal to this) 0.05 0.001
differential_VoxOrRas       = 1.0      (mm if used on RAS; fraction of voxel dimension if used on voxels)


///////////////////////////////////////////////////
/// Rigidbody Registration of subject to target ///

voxStepRigidRegMultScale    = 4
scales                      = [ 0 83 49 27 16 9 5 1 ] (White space separation. And note the space after '[' and before ']')
translationMin              = 0.1      (mm)         ( > 0 !!) 0.5
rotationMin                 = 0.1      (degrees)    ( > 0 !!) 0.5
maxNumParamsChanges         = 1        (1 is usually good. Allow only up to this many translation and/or rotation changes at a time)
rigidRegMatrixOutFilePrefix = rigidRegMatrix
rigidRegFinesseMethod       = cgGSL                 (Note, voxStepAffineReg used here)
cgMethodRigidReg            = direct
maxCGIterationsRRF          = 64
rigidRegMatrixFile          = 
                              // Read in this matrix if it already exists, instead of recalculating


////////////////////////////////////////////////
/// Affine Registration of subject to target ///

voxStepAffineReg            = 4        (used for rigidRegFinesse and affineReg)
kernelWidthMaxSubjectAR     = 7        (pixel width of Gaussian kernel for blurring. Keep it an odd number >= 3, or 0)
kernelWidthMaxTargetAR      = 7        (these kernel values are used for rigidRegFinesse and affineReg)
kernelWidthStepAR           = 8        (an even number)
affineRegMethod             = cgGSL
cgMethodAffineReg           = direct
cgTolAffineReg              = 2.0e-3   (See GSL manual: specifies accuracy of line minimization ~cos(theta))
cgEpsAbsAffineReg           = 1.0e-2   (See GSL manual: specifies norm of gradient for convergence) 1.0e-2
cgStepSizeAffineReg         = 0.5      (See GSL manual: size of the first trial step)
affineRegMatrixOutFilePrefix = affineRegMatrix
affineRegMatrixFile         = 
                              // Read in this matrix if it already exists, instead of recalculating


//////////////////////////////////////////////////////////
/// Nonlinear reg of subject to target (solve Hessian) ///

useMaskNonLinReg            = 1
lambdaMaskMin               = 0.1     // 0.0 <= lambdaMaskMin <= 1.0: mask value used in setupHessian() will be MAX(mask[voxel], lambdaMaskMin
voxStepNonlinReg            = 1
nonlinFlowNumMax            = 3       // Only used when symmetric = 0
nonlinFlowNumRenormIntensity = 8

kernelWidthSubjectNR        = [ 21 19 17 15 13 11 9 7 ]  // Pixel width of Gaussian kernel for blurring. Odd numbers >= 3, or 0.
kernelWidthTargetNR         = [ 21 19 17 15 13 11 9 7 ]  // For brains with very large venrticular changes, may need 19 in arrays.

enforceDecrease             = 1       // 0|1 switch to control exit condition from bicgstabc()
bicgstabErrFac              = 160.0    // 160.0
bicgstabTol                 = 1.0e-8
bicgstabMaxIter             = 128

hessianErrorMax             = 1.0e-3

lambda0                     = 1.0     // Coefficiennt of difference term in bicgstab cost fn.
lambda1Min                  = 1.0e3   // Coefficiennt of displacement norm (size) term in bicgstab cost fn. > 0.
lambda1Max                  = 1.0e3
lambda2Min                  = 1.5e3   // Coefficient of gradient term in cost function. > 0.  1.5e3 to 2.5e3 is good.
lambda2Max                  = 1.5e3
lambda2Decrement            = 0.0     // -1.5e3   0.4e3

sincInterp                  = 1       // 0 ==> trilinear (default), !0 ==> sinc
